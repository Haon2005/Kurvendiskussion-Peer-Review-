[
  {
    "objectID": "wertebereich.html",
    "href": "wertebereich.html",
    "title": "Wertebereich untersuchen",
    "section": "",
    "text": "Der Wertebereich (oder die Wertemenge) einer Funktion (f) ist die Menge aller möglichen Ausgabewerte (f(x)), die entstehen, wenn man alle erlaubten Eingabewerte (x) aus dem Definitionsbereich einsetzt.\nDieser Abschnitt ist ein recht komplexer, da die Existenz von Extrempunkten, bzw. das Verhalten im Unendlichen, oder das existieren von Asymptoten hierfür relevant ist, wird geraten diesen Abschnitt erst nach den Kapiteln Globalverhalten und Asymptoten, so wie Extrempunkte/Sattelpunkte zu betrachten.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Wertebereich bestimmen"
    ]
  },
  {
    "objectID": "wertebereich.html#python-implementierung-wertebereich-bestimmen",
    "href": "wertebereich.html#python-implementierung-wertebereich-bestimmen",
    "title": "Wertebereich untersuchen",
    "section": "Python-Implementierung: Wertebereich bestimmen",
    "text": "Python-Implementierung: Wertebereich bestimmen\nWie gerade gesehen ist das bestimmen des Wertebereich durch sehr viele Faktoren recht schwierig.\n\nEs muss bestimmt werden, ob es Definitionslücken gibt.\nDann muss untersucht werden, ist die Funktion linear oder nicht-linear\nFalls linear, hat sie eine Steigung?\nFalls nicht linear hat sie ein globales Minimum, Maximum?\nGibt es eine horizontale Asymptote?\nFalls eine solche existiert schränkt diese im Globalverhalten die Funktionswerte ein.\n\nsympy hat dankenswerterweise eine Untermodul sympy.calculus.util welches die Funktion function_range beinhaltet.\nDie Funktion berechnet genau das was im Namen steckt, die Range der Funktion, also alle Werte die die Funktion annehmen kann zu gut Deutsch den Wertebereich der Funktion.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp 1\n\n\n\n\n\n\nWie schon oben erklärt geht es mehr oder minder nur darum die Funktion function_range anzuwenden.\nDiese Funktion befindet sich aber in einem Untermodul von sympy\nD.h. es reicht nicht von sympy zu importieren, es muss auch das Untermodul sympy.calculus.util importiert werden.\nWenn das importiert ist, sollte der Rest des Programms relativ leicht zu schreiben sein (davon ausgehend, dass dieses Kapitel wie empfohlen als vorletztes gemacht wird.)\n\n\n\n\n\n\n\n\n\n\nNoteTipp 2\n\n\n\n\n\n\nDas Modul kann wie folgt importiert werden:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWichtig ist, dass function_range jetzt genutzt werden kann, ohne ein sympy. davor, oder gar einem sympy.calculus.util. davor!\nDenk dran eine Ausgabe zu formulieren in der der bestimmte Wertebereich ausgegeben wird.\n\n\n\n\n\n\n\n\n\n\nNoteEine mögliche Minimallösung\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nDamit ist die grundlegende Kurvendiskussion abgeschlossen! Im nächsten großen Abschnitt Graphen zeichnen lernst du, wie du all diese Erkenntnisse nutzen kannst, um eine aussagekräftige Visualisierung deiner Funktion zu erstellen.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Wertebereich bestimmen"
    ]
  },
  {
    "objectID": "uebersicht_symmetrie_achsen.html",
    "href": "uebersicht_symmetrie_achsen.html",
    "title": "Symmetrie und Achsenschnittpunkte",
    "section": "",
    "text": "Es geht in diesem Abschnitt darum allgemeine Eigenschaften der Funktion zu bestimmen, dazu gehören:\n\nSymmetrieverhalten\n\nIn diesem Abschnitt geht es darum zu bestimmen ob die Funktion Achsen-, oder Punktsymmetrisch ist. Oder ob nichts von beidem der Fall ist.\n\n\n\n\nNullstellen\n\nIn diesem Kapitel geht es darum herauszufinden, wie mithilfe von Python Nullstellen bestimmt werden können.\n\n\n\n\nSchnittpunkte mit der Y-Achse\n\nIn diesem Teil des Tutorials sollst Du lernen, wie Du den Y-Achsenabschnitt einer Funktion mithilfe von Python ausgeben kannst.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte"
    ]
  },
  {
    "objectID": "uebersicht_graphen_zeichnen.html",
    "href": "uebersicht_graphen_zeichnen.html",
    "title": "Graphen zeichnen",
    "section": "",
    "text": "Kapitelübersicht\nIn diesem Kapitel wird sich mit der graphischen Darstellung von Funktionen beschäftigen, dass ganze wird in zwei Kapitel unterteilt:\n\nGraphen erstellen\n\nIm ersten Abschnitt soll es um die Grundlagen der Graphischen Darstellung mit Hilfe von Python gehen.\nWas für Bibliotheken werden benötigt, was sind die Grundbefehle, die für das erstellen eines Graphen wichtig sind.\n\n\n\n\nGraphen beschriften\n\nDieser Abschnitt soll das Ende des Tutorials darstellen, da in diesem Abschnitt behandelt wird wie, mit Hilfe der ganzen anderen Kapitel, Funktionen im Graph dargestellt werden können und dazu besondere Punkte der Funktion im Graphen markiert, Asymptoten eingezeichnet werden etc.",
    "crumbs": [
      "Graphen zeichnen"
    ]
  },
  {
    "objectID": "uebersicht_definition_werte.html",
    "href": "uebersicht_definition_werte.html",
    "title": "Definitionsbereich und Wertebereich",
    "section": "",
    "text": "Der Definitionsbereich\nDer Definitionsbereich (auch Definitionsmenge genannt) einer Funktion (f) ist die Menge aller Werte, für die die Funktion definiert ist, d.h., für die ein gültiger Funktionswert berechnet werden kann. Mit Python und der Bibliothek SymPy können wir versuchen, den Definitionsbereich für verschiedene Arten von Funktionen zu bestimmen. SymPy erlaubt uns, mit mathematischen Symbolen und Ausdrücken zu arbeiten. Also Gleichungen zu lösen.\nEs gibt zwei Gründe, warum eine Funktion eine Definitionslücke hat, beide hängen von den jeweiligen Begrenzungen unser Begriffe ab.\nZum einen gebrochen-rationale Funktionen bzw. Brüche. Die Division durch Null ist nicht definiert, daher hat jede Funktion eine Definitionslücke, wenn sonst durch 0 geteilt werden würde an der Stelle.\nZum anderen Funktionen mit Wurzeln gerade Wurzeln (2te-,4te-,Wurzel) sind für negative Zahlen nicht definiert (Es sei denn man befindet sich in ℂ). Da negative Werte innerhalb eine Wurzel nicht definiert sind, gibt es auch hier eine Definitionslücke, für alle Werte an denen Die Funktion einen negativen Wert der Wurzel wiedergeben würde.\nWir betrachten die unterschiedlichen Untersuchungen getrennt, natürlich können die beiden Untersuchungen auch in einem Python Programm abgearbeitet werden.\n\n\nDer Wertebereich\nDer Wertebereich (auch Wertemenge genannt) einer Funktion (f) ist die Menge aller Werte, die diese Funktion annehmen kann, d.h. die Menge aller Werte welche durch einsetzen aller Elemente aus dem Definitionsbereich bestimmt werden. Der Wertebereich einer Funktion kann aus verschiedenen Gründen eingeschränkt sein, es gibt den trivialen Fall der auch untersucht werden kann, denn wir hier aber der Übersichtlichkeit wegen wegfallen lassen. Obendrein wird empfohlen erst die anderen Kapitel durchzuarbeiten, da das Kapitel Wertebereich unteranderem Extremwerte wichtig ist, aber auch Asymptoten und Verhalten der Funktion an Grenzen oder im Unendlichen beinhaltet.\nEs gibt zum einen strukturelle Eigenschaften der Funktion welche den Wertebereich einschränken können. Darunter fällt das vorhanden Sein von globalen Extremwerten und natürliche Wertegrenzen bestimmter Funktionstypen (Exponentialfunktionen, Wurzelfunktionen, Betragsfunktionen, Trigonometrische Funktion, Periodische Funktionen) Auch spielt das Verhalten der Funktion an Grenzen oder im Unendlichen einen Rollen, dies bezieht sich vor allem auf horizontale Asymptoten, da diese den Wertbereich einschränken.",
    "crumbs": [
      "Definitionsbereich und Wertebereich"
    ]
  },
  {
    "objectID": "symmetrieverhalten.html",
    "href": "symmetrieverhalten.html",
    "title": "Symmetrieverhalten untersuchen",
    "section": "",
    "text": "In diesem Kapitel des Tutorials sollst Du lernen, wie Du mithilfe von Python das Symmetrieverhalten einer Funktion untersuchen kannst.\nHierbei gilt wie in anderen Kapiteln, dass in der Python Umgebung auf dieser Website leider keine Input Abfragen, also Eingabeforderungen genutzt werden können, also betrachten wir hier Programme, an denen an einer Stelle eine Funktion eingegeben werden kann.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Symmetrieverhalten untersuchen"
    ]
  },
  {
    "objectID": "symmetrieverhalten.html#wie-teste-ich-eine-funktion-auf-achsensymmetrie-zur-y-achse",
    "href": "symmetrieverhalten.html#wie-teste-ich-eine-funktion-auf-achsensymmetrie-zur-y-achse",
    "title": "Symmetrieverhalten untersuchen",
    "section": "Wie teste ich eine Funktion auf Achsensymmetrie zur Y-Achse?",
    "text": "Wie teste ich eine Funktion auf Achsensymmetrie zur Y-Achse?\nDie Grundidee ist ähnlich wie in anderen Kapiteln. Wir nutzen sympy, mit dieser Bibliothek können wir Funktionen als mathematische Objekte betrachten, deren Eigenschaften wir untersuchen können. Zuvor müssen wir unsere Variable als Symbol definieren, damit das Programm diese Variable anders als andere Python Variablen nutzt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Symmetrieverhalten untersuchen"
    ]
  },
  {
    "objectID": "symmetrieverhalten.html#wie-teste-ich-eine-funktion-auf-punktsymmetrie-zum-ursprung",
    "href": "symmetrieverhalten.html#wie-teste-ich-eine-funktion-auf-punktsymmetrie-zum-ursprung",
    "title": "Symmetrieverhalten untersuchen",
    "section": "Wie teste ich eine Funktion auf Punktsymmetrie zum Ursprung?",
    "text": "Wie teste ich eine Funktion auf Punktsymmetrie zum Ursprung?\nDa der Code für diesem Test sehr ähnlich ist, ist das eine Aufgabe für Dich. Schreibe einen Code, der eine Funktion auf Punktsymmetrie zum Ursprung testet.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Symmetrieverhalten untersuchen"
    ]
  },
  {
    "objectID": "monotonieverhalten.html",
    "href": "monotonieverhalten.html",
    "title": "Monotonieverhalten untersuchen",
    "section": "",
    "text": "Eine Funktion heißt auf einem Abschnitt monoton steigend, wenn sie auf diesem Abschnitt dauerhaft eine Steigung \\(\\ge 0\\) aufweist.\nEine Funktion heißt auf einem Abschnitt monoton fallend, wenn sie auf diesem Abschnitt dauerhaft eine Steigung \\(\\le 0\\) aufweist.\nEine Funktion heißt auf einem Abschnitt streng monoton steigend, wenn sie auf diesem Abschnitt dauerhaft eine Steigung \\(\\mathbf{&gt;} 0\\) aufweist.\nEine Funktion heißt auf einem Abschnitt streng monoton fallend, wenn sie auf diesem Abschnitt dauerhaft eine Steigung \\(\\mathbf{&lt;} 0\\) aufweist.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Monotonieverhalten untersuchen"
    ]
  },
  {
    "objectID": "monotonieverhalten.html#aufgabe",
    "href": "monotonieverhalten.html#aufgabe",
    "title": "Monotonieverhalten untersuchen",
    "section": "Aufgabe",
    "text": "Aufgabe\nJetzt geht es darum den letzten Schritts des Programms zu schreiben. Hierbei ist es hilfreich entweder eine While-Schleife, oder eine For-Schleife zu verwenden.\n\n\nWhile-/For- Schleifen\n\n\nWhile-Schleife\nWenn eine Rechnung/ eine Abfrage mehrfach ausgeführt werden soll, is dies vereinfacht mit Hilfe von Schleifen möglich. While-Schleifenwiederholen hierbei den Code solange wie eine gewisse Bedingung erfüllt ist. Ein kleines Bsp.:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFor-Schleife\nFor-Schleifenwiederholen sich über einen gewissen Intervall. Das Schlüsselwort range beschreibt hierbei das Intervall von \\(a\\) bis \\(b\\). Dabei ist \\(a\\) der Start der Iteration und \\(b\\) der Endpunkt der Iteration.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWenn Du die unterschiedlichen Schleifen verstanden hast (teste gerne auch noch ein wenig herum).\nVersuch das obige Programm (hier drunter nochmal in Kopie), so fortzusetzen, dass es die Liste durchgeht und in jedem Intervall einen Wert testet, dessen Vorzeichen bestimmt (also ob die Funktion steigt/fällt) und das nutzt um das Monotonieverhalten passend zu bestimmen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Monotonieverhalten untersuchen"
    ]
  },
  {
    "objectID": "monotonieverhalten.html#aufgabe-2",
    "href": "monotonieverhalten.html#aufgabe-2",
    "title": "Monotonieverhalten untersuchen",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nWenn Du das hinbekommen hast, versuche das Programm noch ein wenig zu verfeinern. Baue in das Programm noch eine Ausgabe ein, welche Nutznießern des Programms ausgibt, was das Monotonieverhalten ist.\nHier kannst Du an der Ausgabe noch eine Menge stellschrauben drehen, die die Ausgabe direkter machen. D.h. wie oben erwähnt kannst du Abschnitte an denen das gleiche Vorzeichen nacheinander vorkommt zusammen fassen und statt streng monoton, als monoton steigend/fallend bezeichnen.\nProbiere das Ganze am besten mit unterschiedlichen Funktionen aus um zu testen, wie gut dein Programm für sie funktioniert.\nWenn du mit deinem Ergebnis zufrieden bist, geht es weiter in Extrempunkte-Sattelpunkte.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Monotonieverhalten untersuchen"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tutorial Übersicht",
    "section": "",
    "text": "Kurven Diskussion mit Python realisieren\nAuf dieser Webseite soll dir anhand eines dir bekannten Themas Python näher gebracht werden.\n\n\n\n\n\n\nNoteFür ein paar Tipps zur Nutzung des Tutorials hier klicken!\n\n\n\n\n\nSolche klickbaren Blöcke wird es immer mal wieder im Tutorial geben, um das Ganze ein wenig übersichtlicher zu machen, oder aber um evtl. bekanntes Wissen für Nutzende, die dieses bereits haben auszublenden.\n\n\n\nHier klicken!\n\nAuch diese Form der klickbaren Blöcke wird aus ähnlichen Gründen im Tutorial erscheinen, sie kann aber im Gegenzug zum oberen keine Icons enthalten.\n\nLinksseitig siehst du eine Übersicht über das ganze Tutorial.\nDu kannst die einzelnen Abschnitt auf-/zu klappen.\nDas Tutorial ist dafür gemacht von oben bis unten nacheinander durchgearbeitet zu werden. Beim Überspringen von Kapiteln/Unterkapiteln kann es daher sein, dass weiteres nicht verstanden wird.\nRechtsseitig siehst du die Übersicht über die Seite, auf der du bist. Das heißt, hier kannst du die einzelnen Überschriften des Unterkapitels sehen und direkt dorthin springen.\nOben in der Leiste erkennst du mehrere Symbole. Die  ist die Suchfunktion, mit der du im ganzen Tutorial nach einem Begriff suchen kannst. Mit dem -Symbol kannst du zwischen Light- und Dark-Mode wechseln. Das -Symbol aktiviert den Reader-Mode, der die Seitenleisten ausblendet, um dir ein ungestörtes Lesen zu ermöglichen.\n\n\n\nZiel des Tutorials:\nDas Tutorial soll dir, als Nutzende Person, Python ein wenig näher bringen mithilfe des Abitur Themas der Kurvendiskussion.\nHierbei werden Schritt für Schritt die Schritte der Kurvendiskussion durchgegangen und jeweils gezeigt, wie diese Schritte mit Python umgesetzt werden können.\nIn diesem Tutorial werden oft Code-Blöcke wie die folgenden auftauchen, das sind Pyodide-Python-Blöcke, sie sind ausführbar mit dem #Pfeilsymbol(dreieck nach rechts spitz) und führen den Code der in ihnen steht aus.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSolche Felder erstellen eine Python Umgebung.\nDas heißt in ihnen kannst du wie in Python programmieren!\n\n\n\n\n\n\nTipWeiteres zu den Code-Blöcken\n\n\n\nWeitere Code-Blöcke erzeugen kannst du mit dem “Add New Codeblock” Button erzeugen.\nKi-Feedback zu deinem Code kannst du mit dem Feedback Button erzeugen, hierfür musst du jedoch oben eine Base-Url und einen API-Key angegeben haben.",
    "crumbs": [
      "Startseite"
    ]
  },
  {
    "objectID": "graphen_beschriften.html",
    "href": "graphen_beschriften.html",
    "title": "Graphen beschriften",
    "section": "",
    "text": "Willkommen zum Abschlusskapitel!\nHier wird alles aus den vorherigen Abschnitten zusammengefasst und verarbeitet. Unser Ziel ist es, ein einziges, leistungsfähiges Python-Programm zu entwickeln, das eine Funktion umfassend analysiert und alle wichtigen Merkmale – Achsenschnittpunkte, Extrema, Wendepunkte und Asymptoten – in einem einzigen, übersichtlichen Graphen darstellt.\n\n\n\nAlles beginnt mit der Fähigkeit, eine Funktion grafisch darzustellen. Hier kann das Wissen aus dem Abschnitt Graphen erstellen helfen, um eine Basis zu schaffen.\n\n\n\n\n\n\nNoteErinnerung: Graphen erstellen\n\n\n\n\n\nIm Abschnitt Graphen erstellen haben wir gelernt, wie man eine Funktion mit numpy und matplotlib plottet. Der grundlegende Ablauf war:\n\nVariablen/ Funktion mit sympy definieren.\nMit numpy.linspace eine Reihe von x-Werten erzeugen.\nDie y-Werte berechnen.\nMit matplotlib.pyplot.plot den Graphen zeichnen.\n\n\n\n\n\n\n\nEin kleiner Startcode von dem aus Du den Rest des Kapitels erarbeiten sollst (mit Tipps natürlich!).\n\n\nHier klicken um den Startcode anzuzeigen\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nNoteHinweis zu unterschiedlichen Objektformen in Python\n\n\n\n\n\nIm obigen Code sind alle in diesem Tutorial vorgekommenen Varianten eine Funktion in Python einzuspeisen nochmal aufgeschrieben.\nEin Überblick was die unterschiedlichen Objekte für Vor-/Nachteile haben.\n\nString Objekt: Ein String ist eine Aneinanderreihung von Zeichen, d.h. wenn die Funktion angegeben wird, ist sie wie ein beliebiges Wort für Python.\n\nDies ist vor allem (was leider in diesem Tutorial nicht gemacht werden kann) wichtig, wenn es darum geht eine Eingabe des Nutzers außerhalb des Codes abzufragen. D.h. wenn ich will das der Nutzer vom Programm die Frage gestellt bekommt “Welche Funktion willst du untersuchen?” Der Nutzer kann dann die Funktion im Terminal eingeben und diese Eingabe kann als String in Python ausgelesen werden und dem Nutzer nach Durchlauf des Programms alle relevanten Eigenschaften der Funktion anzeigen.\n\nSympy Objekt: Mit einer Funktion die so in Python gespeichert ist kann algebraisch gearbeitet werden, heißt damit können Nullstellen berechnet, Ableitungen bestimmt etc. werden.\nNumpy Objekt: Mit einer so gespeicherten Funktion kann sehr gut gerechnet werden, hier wird die Funktion in effektiver vektorschreibweise gespeichert damit Rechnungen möglichst effektiv durchgeführt werden können.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDiese Variante wurde häufig im Tutorial genutzt, f ist hierbei ein sympy Objekt, da in der Variable f eine Variable vorkommt die vorher explizit als Sympy Variable definiert wird.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn diesem Fall ist f_str eine Funktion die als String gespeichert ist.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDurch sympy.sympify wird aus dem String ein Sympy Objekt (identisch mit dem ersten Beispiel) erstellt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nsympy.lambdify ist eine Art Übersetzer mit dem Objekte in einen anderen Objekttypen verwandelt werden, in diesem Fall wird \\(f_{sym}\\) basierend auf der Variable x in numpy übersetzt, dass heißt \\(f_{np}\\) ist ein numpy-Objekt.\n\n\n\n\n\n\n\n\nDas Ziel dieses Abschnittes ist es in einem Graphen alle relevanten Punkte automatisch einzuzeichnen, so dass idealerweise der Nutzer nur seine Funktion eingeben muss und der Rest automatisch vom Programm gemacht wird.\nDas heißt vor allem auch, dass Nullstellen, Extrempunkte/ Sattelpunkte und Wendepunkte und der y-Achsenabschnitt eingezeichnet werden sollen.\n\n\n\n\n\n\nNoteHinweis Schritt 2\n\n\n\n\n\nHinweis, bei allen Teilen des Schritt 2 gilt, es kann ein relevanter x-Wert berechnet werden und dann mit \\(f(x_{relevanter Wert})\\) der y-Wert bestimmt werden. Alle relevanten Punkte einer Gattung können in die gleiche Variablen Liste reingeschrieben werden und geplottet werden, so dass in deren Label und der Legende auch der passende Begriff angegeben wird.\nZ.B. sollten \\(x_{nullstelle} ={x_1,...,x_n} \\quad \\text{und} \\quad y_{nullstelle} ={f(x_1),...,f(x_n)}\\) derart sein, dass \\(\\forall \\quad x_i \\in x_{nullstelle}\\) gilt \\(f(x_i)=0\\).\nBei allen Programmen soll \\(f(x)= x^3 - 6*x^2 + 9*x\\) nur als Beispiel fungieren, natürlich sollten die Programme möglichst für alle Funktionen, oder mindestens sehr viele unterschiedliche Funktionen funktionieren.\n\n\n\n\n\nZuerst solltest Du, auch wenn Du es bereits gesehen hast den Abschnitt Nullstellen bestimmen betrachten.\nIm Prinzip kannst Du den Code von dort mit dem Code von hier kombinieren.\nD.h. im folgenden Block sollst Du versuchen zusammen mit Deinem Wissen aus Graphen ein Programm zu schreiben, welches Die Nullstellen von \\(f(x)= x^3 - 6*x^2 + 9*x\\) zum einen berechnet, aber auch in einem Plot markiert.\nWenn es Dir einfacher fällt kannst Du dafür auch erstmal nicht die Funktion plotten, Ziel sollte jedoch sein die Funktion und den Nullstellen Plot in ein Programm zu integrieren, am besten so, dass beides in der Legende erscheint.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Nullstellen\n\n\n\n\n\nDer wichtige Befehl des Nullstellen bestimmen Abschnittes war:\n* sympy.solveset(f, x, domain=sympy.S.Reals) damit ließen sich die Nullstellen von f bzgl. der Variable x bestimmen und es werden nur Lösungen angegeben, welche in der Domäne der Reellen Zahlen liegen.\n\n\n\n\n\n\nBevor Du das bearbeitest, solltest Du den Abschnitt Extrempunkte anschauen.\nHier sollst Du nämlich den Inhalt von dem Abschnitt zusammen mit dem Inhalt des Graphen verarbeiten mit dem Ziel ein Programm zu entwickeln, welches die Extremstellen von \\(f(x)= x^3 - 6*x^2 + 9*x\\) bestimmt und diese auch im Graphen als solche einzeichnet.\nOptimal wäre natürlich, wenn Tiefpunkte und Hochpunkte jeweils als solche ausgezeichnet werden würden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Extrempunkte/Sattelpunkte\n\n\n\n\n\nDie wichtigen Funktionen aus dem Extrempunkte Abschnitt waren:\n* sympy.diff(f,x) diese Funktion bestimmt die Ableitung von f bezüglich der Variable x. * sympy.solveset(f, x, domain=sympy.S.Reals) damit können die Nullstellen einer Funktion bestimmt werden.\n\n\n\n\n\n\nBevor Du diesen Abschnitt bearbeitest sei geraten den Abschnitt Wendepunkte anschauen, da es hier darum geht ein Programm zu erstellen, welches mithilfe des Graphen Wissens in der Lage ist die Wendepunkte von der Funktion \\(f(x)= x^3 - 6*x^2 + 9*x\\) zu berechnen und diese in einem Plot einzuzeichnen, so dass diese auch in der Legende erscheinen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Wendepunkte\n\n\n\n\n\nDie wichtigen Funktionen aus dem Wendepunkte Abschnitt waren:\n* sympy.diff(f,x) diese Funktion bestimmt die Ableitung von f bezüglich der Variable x. * sympy.solveset(f, x, domain=sympy.S.Reals) damit können die Nullstellen einer Funktion bestimmt werden.\n\n\n\n\n\n\nBeim Bearbeiten dieses Teils wird dir Vorwissen aus dem Abschnitt Achsenschnittpunkte immens weiterhelfen.\nMithilfe des Abschnittes Graphen ist deine Aufgabe einen Code zu schreiben welcher in der Lage ist den Achsenschnittpunkt der Funktion $f(x)= x^3 - 6x^2 + 9x $ zu bestimmen und passend in dem Plot zu markieren.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Wendepunkte\n\n\n\n\n\nAls Tipp kann hier gegeben werden, dass der Y-Achsenabschnitt einer jeden Funktion an der Stelle ist, an der \\(x=0\\) ist, heißt \\(f(0)=y-Achsenabschnitt\\).\n\n\n\n\n\n\nVersuche nun alles bisherige in einem einzelnen Code unterzubringen, denk dran der Übersicht und der Funktion des Programmes halber jeweils eigen indizierte Variablen zu nutzen, welche zum Zweck passen.\nIn deinem Code solle auch eine Ausgabe der Werte im Textformat, so wie in den Kapiteln zuvor stattfinden, somit hat der Anwender die Möglichkeit es einmal graphisch und als Liste die Informationen zu bekommen, einige Informationen wie später die Monotonieintervalle sind auch ein wenig trickreich einzuzeichnen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteEine möglichst simple mögliche Lösung\n\n\n\n\n\nDeine Lösung sollte idealerweise schöner aussehen als diese hier, aber falls du gar nicht weiter weißt kannst du dir hier gerne Ideen holen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nWie im Abschnitt Asymptoten, bzw. Globalverhalten bereits geklärt haben einige Funktionen Asymptoten, für diesen Teil des Tutorials sollte sich daher diese Abschnitte unbedingt angeschaut werden.\n\n\n\n\n\n\nNoteErinnerung: Asymptoten finden\n\n\n\n\n\n\nVertikale Asymptoten: Nennernullstellen, die keine Zählernullstellen sind. (sympy.fraction, sympy.solve)\nHorizontale Asymptoten: Grenzwert von f(x) für x -&gt; oo und x -&gt; -oo. (sympy.limit)\nSchiefe Asymptoten: Ergebnis der Polynomdivision, wenn Zählergrad = Nennergrad + 1. (sympy.div)\n\n\n\n\n\n\nDa die oben als Test benutzte Funktion keine Asymptoten hat denen sie sich annähert wird hier die Funktion \\(g(x) = \\frac{2x^2 - 1}{x^2 - 4}\\) betrachtet.\nDeine Aufgabe ist jetzt ein Programm zu schreiben, welches die folgenden Schritte ausführt:\n\nBerechne die vertikalen und horizontalen Asymptoten.\nZeichne die Asymptoten ein nutze gestrichelte Linien o.ä. um sie zu differenzieren\nBonus: Sorge dafür, dass der Graph an den vertikalen Asymptoten eine Lücke aufweist und keine verbindende Linie gezeichnet wird.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Asymptote\n\n\n\n\n\nVielleicht bist Du Dir des Problems schon gewahr geworden und guckst daher in die Tipps, ansonsten versuche Dich doch ein wenig an dem Programm bevor du hier reinliest.\n\n\nTipps für das Plotten von Asymptoten\n\nEs nicht trivial die Asymptoten einzuzeichnen und gibt mehrere Möglichkeiten\n\nDie Asymptoten Funktion berechnen und dann als Funktion plotten.\nHorizontale/Vertikale Linien einzeichnen mit plt.axhline() und plt.axvline() an den richtigen Stellen.\n\nWarum sollte man 2. machen? Es gibt leider vor allem bei der vertikalen Asymptote ein Problem mit dem plotting per matplotlib, \\(x=a\\) kann nicht so ohne weiteres geplottet werden, eine vertikale Linie (plt.axvline()) lässt jedoch recht leicht plotten.\nBei der schiefen Asymptote lässt sich nun aber 2. nicht anwenden, da hier keine horizontale/vertikale Linie gesucht wird, sondern entweder eine schiefe Gerade oder eine Kurve, bei beiden Möglichkeiten hilft nur die Asymptoten Funktion tatsächlich zu plotten.\n\n\n\nTipp für eine saubere grafische Darstellung\n\nDu wirst feststellen, dass matplotlib versucht, eine durchgehende Linie zu zeichnen, auch über die vertikale Asymptote hinweg. Das sieht nicht schön aus.\nUm das zu verhindern, kannst du einen Trick anwenden: * Finde die x-Werte, die sehr nah an deiner Asymptote liegen. (Nahe der bestimmten Nullstelle des Nenners) * Ersetze die zugehörigen y-Werte an diesen Stellen durch np.nan (Not a Number). * matplotlib zeichnet dann automatisch eine Lücke im Graphen.\nEin Code-Schnipsel dazu könnte so aussehen:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDer Code sorgt dafür, dass die Y-Werte in einem Betragsabstand von 0,1 um den x Wert an dem eine Definitionslücke existiert nicht gezeichnet werden.",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen beschriften"
    ]
  },
  {
    "objectID": "graphen_beschriften.html#schritt-1-das-grundgerüst-eine-funktion-plotten",
    "href": "graphen_beschriften.html#schritt-1-das-grundgerüst-eine-funktion-plotten",
    "title": "Graphen beschriften",
    "section": "",
    "text": "Alles beginnt mit der Fähigkeit, eine Funktion grafisch darzustellen. Hier kann das Wissen aus dem Abschnitt Graphen erstellen helfen, um eine Basis zu schaffen.\n\n\n\n\n\n\nNoteErinnerung: Graphen erstellen\n\n\n\n\n\nIm Abschnitt Graphen erstellen haben wir gelernt, wie man eine Funktion mit numpy und matplotlib plottet. Der grundlegende Ablauf war:\n\nVariablen/ Funktion mit sympy definieren.\nMit numpy.linspace eine Reihe von x-Werten erzeugen.\nDie y-Werte berechnen.\nMit matplotlib.pyplot.plot den Graphen zeichnen.\n\n\n\n\n\n\n\nEin kleiner Startcode von dem aus Du den Rest des Kapitels erarbeiten sollst (mit Tipps natürlich!).\n\n\nHier klicken um den Startcode anzuzeigen\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\nNoteHinweis zu unterschiedlichen Objektformen in Python\n\n\n\n\n\nIm obigen Code sind alle in diesem Tutorial vorgekommenen Varianten eine Funktion in Python einzuspeisen nochmal aufgeschrieben.\nEin Überblick was die unterschiedlichen Objekte für Vor-/Nachteile haben.\n\nString Objekt: Ein String ist eine Aneinanderreihung von Zeichen, d.h. wenn die Funktion angegeben wird, ist sie wie ein beliebiges Wort für Python.\n\nDies ist vor allem (was leider in diesem Tutorial nicht gemacht werden kann) wichtig, wenn es darum geht eine Eingabe des Nutzers außerhalb des Codes abzufragen. D.h. wenn ich will das der Nutzer vom Programm die Frage gestellt bekommt “Welche Funktion willst du untersuchen?” Der Nutzer kann dann die Funktion im Terminal eingeben und diese Eingabe kann als String in Python ausgelesen werden und dem Nutzer nach Durchlauf des Programms alle relevanten Eigenschaften der Funktion anzeigen.\n\nSympy Objekt: Mit einer Funktion die so in Python gespeichert ist kann algebraisch gearbeitet werden, heißt damit können Nullstellen berechnet, Ableitungen bestimmt etc. werden.\nNumpy Objekt: Mit einer so gespeicherten Funktion kann sehr gut gerechnet werden, hier wird die Funktion in effektiver vektorschreibweise gespeichert damit Rechnungen möglichst effektiv durchgeführt werden können.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDiese Variante wurde häufig im Tutorial genutzt, f ist hierbei ein sympy Objekt, da in der Variable f eine Variable vorkommt die vorher explizit als Sympy Variable definiert wird.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn diesem Fall ist f_str eine Funktion die als String gespeichert ist.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDurch sympy.sympify wird aus dem String ein Sympy Objekt (identisch mit dem ersten Beispiel) erstellt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nsympy.lambdify ist eine Art Übersetzer mit dem Objekte in einen anderen Objekttypen verwandelt werden, in diesem Fall wird \\(f_{sym}\\) basierend auf der Variable x in numpy übersetzt, dass heißt \\(f_{np}\\) ist ein numpy-Objekt.",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen beschriften"
    ]
  },
  {
    "objectID": "graphen_beschriften.html#schritt-2-besondere-punkte-berechnen-und-einzeichnen",
    "href": "graphen_beschriften.html#schritt-2-besondere-punkte-berechnen-und-einzeichnen",
    "title": "Graphen beschriften",
    "section": "",
    "text": "Das Ziel dieses Abschnittes ist es in einem Graphen alle relevanten Punkte automatisch einzuzeichnen, so dass idealerweise der Nutzer nur seine Funktion eingeben muss und der Rest automatisch vom Programm gemacht wird.\nDas heißt vor allem auch, dass Nullstellen, Extrempunkte/ Sattelpunkte und Wendepunkte und der y-Achsenabschnitt eingezeichnet werden sollen.\n\n\n\n\n\n\nNoteHinweis Schritt 2\n\n\n\n\n\nHinweis, bei allen Teilen des Schritt 2 gilt, es kann ein relevanter x-Wert berechnet werden und dann mit \\(f(x_{relevanter Wert})\\) der y-Wert bestimmt werden. Alle relevanten Punkte einer Gattung können in die gleiche Variablen Liste reingeschrieben werden und geplottet werden, so dass in deren Label und der Legende auch der passende Begriff angegeben wird.\nZ.B. sollten \\(x_{nullstelle} ={x_1,...,x_n} \\quad \\text{und} \\quad y_{nullstelle} ={f(x_1),...,f(x_n)}\\) derart sein, dass \\(\\forall \\quad x_i \\in x_{nullstelle}\\) gilt \\(f(x_i)=0\\).\nBei allen Programmen soll \\(f(x)= x^3 - 6*x^2 + 9*x\\) nur als Beispiel fungieren, natürlich sollten die Programme möglichst für alle Funktionen, oder mindestens sehr viele unterschiedliche Funktionen funktionieren.\n\n\n\n\n\nZuerst solltest Du, auch wenn Du es bereits gesehen hast den Abschnitt Nullstellen bestimmen betrachten.\nIm Prinzip kannst Du den Code von dort mit dem Code von hier kombinieren.\nD.h. im folgenden Block sollst Du versuchen zusammen mit Deinem Wissen aus Graphen ein Programm zu schreiben, welches Die Nullstellen von \\(f(x)= x^3 - 6*x^2 + 9*x\\) zum einen berechnet, aber auch in einem Plot markiert.\nWenn es Dir einfacher fällt kannst Du dafür auch erstmal nicht die Funktion plotten, Ziel sollte jedoch sein die Funktion und den Nullstellen Plot in ein Programm zu integrieren, am besten so, dass beides in der Legende erscheint.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Nullstellen\n\n\n\n\n\nDer wichtige Befehl des Nullstellen bestimmen Abschnittes war:\n* sympy.solveset(f, x, domain=sympy.S.Reals) damit ließen sich die Nullstellen von f bzgl. der Variable x bestimmen und es werden nur Lösungen angegeben, welche in der Domäne der Reellen Zahlen liegen.\n\n\n\n\n\n\nBevor Du das bearbeitest, solltest Du den Abschnitt Extrempunkte anschauen.\nHier sollst Du nämlich den Inhalt von dem Abschnitt zusammen mit dem Inhalt des Graphen verarbeiten mit dem Ziel ein Programm zu entwickeln, welches die Extremstellen von \\(f(x)= x^3 - 6*x^2 + 9*x\\) bestimmt und diese auch im Graphen als solche einzeichnet.\nOptimal wäre natürlich, wenn Tiefpunkte und Hochpunkte jeweils als solche ausgezeichnet werden würden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Extrempunkte/Sattelpunkte\n\n\n\n\n\nDie wichtigen Funktionen aus dem Extrempunkte Abschnitt waren:\n* sympy.diff(f,x) diese Funktion bestimmt die Ableitung von f bezüglich der Variable x. * sympy.solveset(f, x, domain=sympy.S.Reals) damit können die Nullstellen einer Funktion bestimmt werden.\n\n\n\n\n\n\nBevor Du diesen Abschnitt bearbeitest sei geraten den Abschnitt Wendepunkte anschauen, da es hier darum geht ein Programm zu erstellen, welches mithilfe des Graphen Wissens in der Lage ist die Wendepunkte von der Funktion \\(f(x)= x^3 - 6*x^2 + 9*x\\) zu berechnen und diese in einem Plot einzuzeichnen, so dass diese auch in der Legende erscheinen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Wendepunkte\n\n\n\n\n\nDie wichtigen Funktionen aus dem Wendepunkte Abschnitt waren:\n* sympy.diff(f,x) diese Funktion bestimmt die Ableitung von f bezüglich der Variable x. * sympy.solveset(f, x, domain=sympy.S.Reals) damit können die Nullstellen einer Funktion bestimmt werden.\n\n\n\n\n\n\nBeim Bearbeiten dieses Teils wird dir Vorwissen aus dem Abschnitt Achsenschnittpunkte immens weiterhelfen.\nMithilfe des Abschnittes Graphen ist deine Aufgabe einen Code zu schreiben welcher in der Lage ist den Achsenschnittpunkt der Funktion $f(x)= x^3 - 6x^2 + 9x $ zu bestimmen und passend in dem Plot zu markieren.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Wendepunkte\n\n\n\n\n\nAls Tipp kann hier gegeben werden, dass der Y-Achsenabschnitt einer jeden Funktion an der Stelle ist, an der \\(x=0\\) ist, heißt \\(f(0)=y-Achsenabschnitt\\).\n\n\n\n\n\n\nVersuche nun alles bisherige in einem einzelnen Code unterzubringen, denk dran der Übersicht und der Funktion des Programmes halber jeweils eigen indizierte Variablen zu nutzen, welche zum Zweck passen.\nIn deinem Code solle auch eine Ausgabe der Werte im Textformat, so wie in den Kapiteln zuvor stattfinden, somit hat der Anwender die Möglichkeit es einmal graphisch und als Liste die Informationen zu bekommen, einige Informationen wie später die Monotonieintervalle sind auch ein wenig trickreich einzuzeichnen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteEine möglichst simple mögliche Lösung\n\n\n\n\n\nDeine Lösung sollte idealerweise schöner aussehen als diese hier, aber falls du gar nicht weiter weißt kannst du dir hier gerne Ideen holen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen beschriften"
    ]
  },
  {
    "objectID": "graphen_beschriften.html#schritt-3-asymptoten-einzeichnen",
    "href": "graphen_beschriften.html#schritt-3-asymptoten-einzeichnen",
    "title": "Graphen beschriften",
    "section": "",
    "text": "Wie im Abschnitt Asymptoten, bzw. Globalverhalten bereits geklärt haben einige Funktionen Asymptoten, für diesen Teil des Tutorials sollte sich daher diese Abschnitte unbedingt angeschaut werden.\n\n\n\n\n\n\nNoteErinnerung: Asymptoten finden\n\n\n\n\n\n\nVertikale Asymptoten: Nennernullstellen, die keine Zählernullstellen sind. (sympy.fraction, sympy.solve)\nHorizontale Asymptoten: Grenzwert von f(x) für x -&gt; oo und x -&gt; -oo. (sympy.limit)\nSchiefe Asymptoten: Ergebnis der Polynomdivision, wenn Zählergrad = Nennergrad + 1. (sympy.div)\n\n\n\n\n\n\nDa die oben als Test benutzte Funktion keine Asymptoten hat denen sie sich annähert wird hier die Funktion \\(g(x) = \\frac{2x^2 - 1}{x^2 - 4}\\) betrachtet.\nDeine Aufgabe ist jetzt ein Programm zu schreiben, welches die folgenden Schritte ausführt:\n\nBerechne die vertikalen und horizontalen Asymptoten.\nZeichne die Asymptoten ein nutze gestrichelte Linien o.ä. um sie zu differenzieren\nBonus: Sorge dafür, dass der Graph an den vertikalen Asymptoten eine Lücke aufweist und keine verbindende Linie gezeichnet wird.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp: Asymptote\n\n\n\n\n\nVielleicht bist Du Dir des Problems schon gewahr geworden und guckst daher in die Tipps, ansonsten versuche Dich doch ein wenig an dem Programm bevor du hier reinliest.\n\n\nTipps für das Plotten von Asymptoten\n\nEs nicht trivial die Asymptoten einzuzeichnen und gibt mehrere Möglichkeiten\n\nDie Asymptoten Funktion berechnen und dann als Funktion plotten.\nHorizontale/Vertikale Linien einzeichnen mit plt.axhline() und plt.axvline() an den richtigen Stellen.\n\nWarum sollte man 2. machen? Es gibt leider vor allem bei der vertikalen Asymptote ein Problem mit dem plotting per matplotlib, \\(x=a\\) kann nicht so ohne weiteres geplottet werden, eine vertikale Linie (plt.axvline()) lässt jedoch recht leicht plotten.\nBei der schiefen Asymptote lässt sich nun aber 2. nicht anwenden, da hier keine horizontale/vertikale Linie gesucht wird, sondern entweder eine schiefe Gerade oder eine Kurve, bei beiden Möglichkeiten hilft nur die Asymptoten Funktion tatsächlich zu plotten.\n\n\n\nTipp für eine saubere grafische Darstellung\n\nDu wirst feststellen, dass matplotlib versucht, eine durchgehende Linie zu zeichnen, auch über die vertikale Asymptote hinweg. Das sieht nicht schön aus.\nUm das zu verhindern, kannst du einen Trick anwenden: * Finde die x-Werte, die sehr nah an deiner Asymptote liegen. (Nahe der bestimmten Nullstelle des Nenners) * Ersetze die zugehörigen y-Werte an diesen Stellen durch np.nan (Not a Number). * matplotlib zeichnet dann automatisch eine Lücke im Graphen.\nEin Code-Schnipsel dazu könnte so aussehen:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDer Code sorgt dafür, dass die Y-Werte in einem Betragsabstand von 0,1 um den x Wert an dem eine Definitionslücke existiert nicht gezeichnet werden.",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen beschriften"
    ]
  },
  {
    "objectID": "graphen_beschriften.html#erstelle-dein-analyse-tool",
    "href": "graphen_beschriften.html#erstelle-dein-analyse-tool",
    "title": "Graphen beschriften",
    "section": "Erstelle Dein Analyse-Tool",
    "text": "Erstelle Dein Analyse-Tool\nNun geht’s an dir Arbeit!\nWichtig ist, dass Du Dir einen Überblick machst davon, was du alles in dem Programm bearbeiten willst, und dir die Kapitel die Du dafür benötigst nebenbei vielleicht in einem anderen Tab aufmachst.\nWichtig ist, du solltest Dir überlegen, welche Bereiche du mit in den Graphen einzeichnen kannst. Dennoch solltest du einmal alle Angaben zur Funktion auch Schriftlich ausgeben lassen, die Werte sind so oder so berechnet.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteDein Analyse Tool: Tipp 1\n\n\n\n\n\nWenn es darum geht einen großen Code zu erstellen sollte zur eigenen Übersicht, aber auch der Übersicht anderer der Code systematisiert werden.\nIn diesem Fall heißt das also z.B.:\n\nImport der relevanten Bibliotheken\nDefinition der Variablen/der Objekte oder noch besser der function\n\nFunctions sind in diesem Tutorial schon erschienen, dennoch eine kurze Zusammenfassung. Eine der elegantesten Lösungen wäre, das Programm als eine function zu schreiben, so dass unten an den Python Code angefügt werden kann function(\\(x^2+3x-7\\)) und dann eine Kurvendiskussion von \\(x^2+3x-7\\) durchgeführt wird.\n\n\nBerechnung der relevanten Werte\n\nHierbei kann gerne auch jeder der Werte differenziert werden, also über einer Gruppe von Rechnungen steht #Wendepunkte z.B.\nx_Wendepunkte, y_Wendepunkte hilft auch enorm dabei eine Übersicht zu haben, also die passenden Wertepaare in ihrer Definition mit ihrem Ursprung benennen\n\nPlotten der relevanten Werte\n\nHier gilt das gleiche wie oben (beides hilft stark bei der Fehlerbehebung)\n\nEigenschaften des Graphen bestimmen\n\nLegende\nGrid\nAchsenbeschriftung\nTitel des Graphen etc.\n\n\n\n\nKlicke HIER, um eine mögliche function, die die Fakultät einer beliebigen Zahl bestimmt zu sehen:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\n\n\nNoteDein Analyse Tool: Tipp 2\n\n\n\n\n\nEin gutes Programm zeichnet sich durch Details und Robustheit aus. Hier sind einige Ideen, wie du dein Tool noch besser machen kannst:\n\nUnterscheide zwischen Hoch- und Tiefpunkten:\n\nAnstatt alle Extrema in eine Liste zu packen, durchlaufe die gefundenen x-Werte der Extrema in einer Schleife die die Bedingungen überprüft.\nSortiere die Punkte in separate Listen (z.B. x_hochpunkte, x_tiefpunkte, y_tiefpunkte, x_sattelpunkte, y_sattelpunkte) und plotte sie mit unterschiedlichen Farben oder Markern Um sie deutlich zu unterscheiden\n\nUmgang mit möglichen Fehlern:\n\nDein Code sollte idealerweise eine Ausgabe haben, welche einen Fehler ausgibt, wenn die Funktion von deinem Programm nicht bearbeitet werden kann:\n\n\n\n\nEin Beispiel\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSaubere Textausgabe:\n\nEs hilft beim erstellen eines eigenen Codes eine Menge die berechneten Werte ausgeben zulassen, dadurch fällt Dir schneller auf wo der Fehler liegen könnte.\n\n\n\n\n\n\n\n\n\n\n\nNoteDein Analyse Tool: Tipp 3\n\n\n\n\n\nZielgerade! Die Grundfunktion steht vermutlich bereits, hier sind noch ein paar Tipps, um Dein Programm abzurunden.\n\nVollständige Text-Analyse:\n\nEin Graph ist toll, aber für eine vollständige Kurvendiskussion braucht man auch Text. Plotte nicht nur die Punkte, sondern auch die Intervalle für Monotonie und Krümmung.\nVergiss nicht, auch den Definitions- und Wertebereich auszugeben!\n\nDynamischer und intelligenter Plot-Bereich:\n\nAnstatt feste x_min und x_max Werte zu verwenden, passe den Plot-Bereich dynamisch an die Funktion an!\nIdee: Sammle alle relevanten x-Werte (Nullstellen, Extrema, Wendepunkte). Finde den kleinsten und größten dieser Werte und füge auf beiden Seiten einen kleinen Puffer hinzu (z.B. 20 % des Gesamtbereichs). So stellst du sicher, dass alle wichtigen Merkmale immer gut sichtbar sind, egal welche Funktion analysiert wird.\n\n\n\n\nEin Beispiel für einen Code der den X-Bereich dynamisch bestimmt\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nGRATULATIONEN, wenn du hier angekommen bist, hast du das gesamte Tutorial durchgearbeitet, jetzt solltest du:\n1. Eine kleine Erinnerung an die Schulmathematik gehabt haben 2. Die Grundmechaniken von Python verstanden haben 3. In der Lage sein eine Kurvendiskussion in Python durchzuführen 4. Auch andere Probleme in Python lösen können indem du die Systeme die du hier kennen gelernt hast dort da anwendest!\nWenn du nicht mal alle Tipps aufmachen musstest, oder beim öffnen des ein oder anderen Tipps dachtest, “Ach das habe ich doch schon…” dann kannst du Dir getrost auf die Schulter klopfen, dass hast du außerordentlich gut gemacht!",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen beschriften"
    ]
  },
  {
    "objectID": "globalverhalten.html",
    "href": "globalverhalten.html",
    "title": "Globalverhalten untersuchen",
    "section": "",
    "text": "In diesem Abschnitt geht es um das Globalverhalten, auch Verhalten im Unendlichen genannt.\nEs wird betrachtet, wie sich die Funktionswerte \\(f(x)\\) verhalten, wenn die \\(x\\)-Werte sehr groß (gegen \\(+\\infty\\)) oder sehr klein (gegen \\(-\\infty\\)) werden, d.h. wir betrachten die Grenzwerte (Limes):\n\\[ \\lim_{x \\to \\infty} f(x) \\quad \\text{und} \\quad \\lim_{x \\to -\\infty} f(x) \\]\nDas Ergebnis dieser Untersuchung verrät uns, ob sich der Graph der Funktion für große/kleine \\(x\\)-Werte einer bestimmten Zahl nähert (horizontale Asymptote) oder ob er unbegrenzt weiter steigt oder fällt.\n\n\nInnerhalb der Python-Bibliothek sympy gibt es eine sehr hilfreiche Funktion die das Ganze für uns berechnet sympy.limit().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nDavon ausgehend, dass Du mehrere der anderen Abschnitte dieses Tutorials bereits bearbeitet hast, sollte diese Funktion einzubetten recht leicht für Dich sein.\nVersuche einen Code zu erstellen, welcher eine von dir bestimmte Funktion untersucht auf das Globalverhalten in positive wie negative Richtung.\nDazu sollte es eine Ausgabe geben, in welcher dem Nutzer angegeben wird, wie sich die Funktion verhält.\nAls kleine Sonderaufgabe: Du kannst auch versuchen den Error auszugeben. Teste am besten aus, was du für eine Ausgabe bekommst, bei unterschiedlichem Grenzverhalten\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn du das geschafft hast, bist du bereit für das nächste Kapitel.\nDas Globalverhalten ist entscheidend für die Bestimmung von waagerechten Asymptoten.\nIm nächsten Kapitel Asymptoten bestimmen werden wir dieses Wissen nutzen.",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Globalverhalten untersuchen"
    ]
  },
  {
    "objectID": "globalverhalten.html#globalverhalten-mit-python-bestimmen",
    "href": "globalverhalten.html#globalverhalten-mit-python-bestimmen",
    "title": "Globalverhalten untersuchen",
    "section": "",
    "text": "Innerhalb der Python-Bibliothek sympy gibt es eine sehr hilfreiche Funktion die das Ganze für uns berechnet sympy.limit().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Globalverhalten untersuchen"
    ]
  },
  {
    "objectID": "globalverhalten.html#aufgabe-globalverhalten-mit-python-bestimmen-lassen",
    "href": "globalverhalten.html#aufgabe-globalverhalten-mit-python-bestimmen-lassen",
    "title": "Globalverhalten untersuchen",
    "section": "",
    "text": "Davon ausgehend, dass Du mehrere der anderen Abschnitte dieses Tutorials bereits bearbeitet hast, sollte diese Funktion einzubetten recht leicht für Dich sein.\nVersuche einen Code zu erstellen, welcher eine von dir bestimmte Funktion untersucht auf das Globalverhalten in positive wie negative Richtung.\nDazu sollte es eine Ausgabe geben, in welcher dem Nutzer angegeben wird, wie sich die Funktion verhält.\nAls kleine Sonderaufgabe: Du kannst auch versuchen den Error auszugeben. Teste am besten aus, was du für eine Ausgabe bekommst, bei unterschiedlichem Grenzverhalten\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn du das geschafft hast, bist du bereit für das nächste Kapitel.\nDas Globalverhalten ist entscheidend für die Bestimmung von waagerechten Asymptoten.\nIm nächsten Kapitel Asymptoten bestimmen werden wir dieses Wissen nutzen.",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Globalverhalten untersuchen"
    ]
  },
  {
    "objectID": "definitionsbereich.html",
    "href": "definitionsbereich.html",
    "title": "Definitionsbereich bestimmen",
    "section": "",
    "text": "Bei gebrochen-rationalen Funktionen (Funktionen, die als Bruch zweier Polynome dargestellt werden) ist die Division durch Null nicht definiert. Der Nenner darf also nicht Null werden.\nNun gilt es einen Algorithmus zu schreiben, welcher die Stellen berechnet, an denen der Nenner Null werden kann.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nVersuche mit den obigen Tipps selbst eine Funktion zu schreiben, welche zu einer gebrochen rationalen Funktion den passenden Definitionsbereich angibt.\nTipp:Benutzt eine if else (wenn dann, sonst) Abfrage.siehe Schleifen\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nJetzt wissen wir also, wir bei einem bekannten Nenner bestimmen können, wann dieser Null wird. Den Nenner direkt anzugeben ist aber zweifelsfrei nicht unbedingt sinnvoll.\nDaher betrachten wir jetzt, wie aus einer gegebenen Funktion der Nenner bestimmt werden kann.\nIn einem weiteren Schritt kann später die Eingabe, von der das Programm nutzenden Person, im Terminal eingegeben werden und diese Ausgabe wird dann verarbeitet (ein möglicher Nenner ausgelesen und der Definitionsbereich bestimmt).\nBeispiel: \\[\nf(x)= \\frac{1}{x-2}\n\\]\nEs geht nun erst einmal darum eine Funktion zu schreiben, welche bei diesem Beispiel den Nenner erkennt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIdeal wäre es wenn nun ein Nutzer die Funktion eingeben würde und unser Programm aus dem Input direkt den Definitionsbereich bestimmt würde. Leider ist die implementierte Version von Python hier ein wenig eingeschränkt und lässt keine Eingabe Aufforderung zu (Ansonsten gibt es den Befehl input () mit dem Sich das durchführen lassen würde), daher betrachten wir hier die Möglichkeit die Funktion selber einzugeben in die funktion_eingabe Variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTeste die gegebene Funktion für unterschiedliche Funktionen (auch für solche, die vielleicht keine Definitionslücken haben und auch keine Brüche i.A.) überprüfe die Ausgabe, passt sie zu dem was du haben willst?\nTeste vielleicht das ganze auch mal mit eine Funktion mit Wurzel, wie reagiert das Programm, hast du vielleicht schon eine Idee wie du das Problem angehen willst, bevor du in den nächsten Abschnitt gehst?\nKleine Erinnerung: Falls du das ganze selber umschreiben willst und nicht nur ausführen willst… du kannst extra Blöcke erschaffen.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Definitionsbereich bestimmen"
    ]
  },
  {
    "objectID": "definitionsbereich.html#definitionslücke-im-nenner-bestimmen",
    "href": "definitionsbereich.html#definitionslücke-im-nenner-bestimmen",
    "title": "Definitionsbereich bestimmen",
    "section": "",
    "text": "Bei gebrochen-rationalen Funktionen (Funktionen, die als Bruch zweier Polynome dargestellt werden) ist die Division durch Null nicht definiert. Der Nenner darf also nicht Null werden.\nNun gilt es einen Algorithmus zu schreiben, welcher die Stellen berechnet, an denen der Nenner Null werden kann.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nVersuche mit den obigen Tipps selbst eine Funktion zu schreiben, welche zu einer gebrochen rationalen Funktion den passenden Definitionsbereich angibt.\nTipp:Benutzt eine if else (wenn dann, sonst) Abfrage.siehe Schleifen\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Definitionsbereich bestimmen"
    ]
  },
  {
    "objectID": "definitionsbereich.html#nenner-aus-einer-funktion-auslesen",
    "href": "definitionsbereich.html#nenner-aus-einer-funktion-auslesen",
    "title": "Definitionsbereich bestimmen",
    "section": "",
    "text": "Jetzt wissen wir also, wir bei einem bekannten Nenner bestimmen können, wann dieser Null wird. Den Nenner direkt anzugeben ist aber zweifelsfrei nicht unbedingt sinnvoll.\nDaher betrachten wir jetzt, wie aus einer gegebenen Funktion der Nenner bestimmt werden kann.\nIn einem weiteren Schritt kann später die Eingabe, von der das Programm nutzenden Person, im Terminal eingegeben werden und diese Ausgabe wird dann verarbeitet (ein möglicher Nenner ausgelesen und der Definitionsbereich bestimmt).\nBeispiel: \\[\nf(x)= \\frac{1}{x-2}\n\\]\nEs geht nun erst einmal darum eine Funktion zu schreiben, welche bei diesem Beispiel den Nenner erkennt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIdeal wäre es wenn nun ein Nutzer die Funktion eingeben würde und unser Programm aus dem Input direkt den Definitionsbereich bestimmt würde. Leider ist die implementierte Version von Python hier ein wenig eingeschränkt und lässt keine Eingabe Aufforderung zu (Ansonsten gibt es den Befehl input () mit dem Sich das durchführen lassen würde), daher betrachten wir hier die Möglichkeit die Funktion selber einzugeben in die funktion_eingabe Variable.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTeste die gegebene Funktion für unterschiedliche Funktionen (auch für solche, die vielleicht keine Definitionslücken haben und auch keine Brüche i.A.) überprüfe die Ausgabe, passt sie zu dem was du haben willst?\nTeste vielleicht das ganze auch mal mit eine Funktion mit Wurzel, wie reagiert das Programm, hast du vielleicht schon eine Idee wie du das Problem angehen willst, bevor du in den nächsten Abschnitt gehst?\nKleine Erinnerung: Falls du das ganze selber umschreiben willst und nicht nur ausführen willst… du kannst extra Blöcke erschaffen.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Definitionsbereich bestimmen"
    ]
  },
  {
    "objectID": "definitionsbereich.html#definitionslücke-in-der-wurzel-bestimmen",
    "href": "definitionsbereich.html#definitionslücke-in-der-wurzel-bestimmen",
    "title": "Definitionsbereich bestimmen",
    "section": "Definitionslücke in der Wurzel bestimmen",
    "text": "Definitionslücke in der Wurzel bestimmen\nFunktionen mit Quadratwurzel im speziellen, aber Funktionen die eine Wurzel mit geradem Nenner im Exponent haben im Allgemeinen haben Definitionslücken, wenn unterhalb der Wurzel eine negative Zahl steht. Diese Definitionslücken gibt es nicht in den komplexen Zahlen, aber in den häufig vor allem in der Schule genutzten reellen Zahlen.\nBetrachten wir also wie in in den gebrochen-rationalen Funktionen zunächst, wie können wir von einem passenden Term auslesen für welche Bereiche dieser negativ ist.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAufgabe zur Bestimmung negativer Werte\nVersuche mit den gegebenen Tipps ein Programm zu schreiben, bei welchem aus der Eingabe des Nutzers bestimmt wird, was die Definitionslücken in der Funktion des Nutzers sind.\nTipp: Die einfachere Version zum Einsteigen ist, sich den Radikanden angeben zu lassen vom Nutzer.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Definitionsbereich bestimmen"
    ]
  },
  {
    "objectID": "definitionsbereich.html#radikanden-aus-einer-funktion-auslesen",
    "href": "definitionsbereich.html#radikanden-aus-einer-funktion-auslesen",
    "title": "Definitionsbereich bestimmen",
    "section": "Radikanden aus einer Funktion auslesen",
    "text": "Radikanden aus einer Funktion auslesen\nDas ganze funktioniert sehr ähnlich wie beim Auslesen des Nenners, zuerst muss aus einer Funktion ein Sympy Objekt gemacht werden. Aus Sympy kann Python dann den Radikanden auslesen in dem das richtige Argument abgefragt wird.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAufgabe zur Bestimmung negativer Werte im Radikanden\nVersuche mit den gegebenen Tipps ein Programm zu schreiben, welches ähnlich wie in dem obigen Beispiel zum Auslesen des Nenners aus einer Eingabe (bzw. hier einer Veränderung der Funktion im Code) automatisch die Definitionslücke bestimmt, welche durch eine Wurzel verursacht wurde\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Definitionsbereich und Wertebereich",
      "Definitionsbereich bestimmen"
    ]
  },
  {
    "objectID": "achsenschnittpunkte.html",
    "href": "achsenschnittpunkte.html",
    "title": "Y-Achsenschnittpunkte ermitteln",
    "section": "",
    "text": "Der Titel ist ein wenig provokant gewählt, da für eine Funktion gilt, dass es für jeden \\(X\\) Wert nur genau einen \\(Y\\) Wert gibt, der diesem zugeordnet wird! Dementsprechend heißt das, dass es genau Einen Y-Achsenabschnittspunkt gibt. Dies ist hierbei der Wert, welcher dem X Wert 0 zugeordnet wird.\n\n\nDavon ausgehend, dass die Funktion bei \\(x=0\\) definiert ist, ist es nicht all zu schwierig den Y-Achsenabschnitt zu bestimmen.\nHierfür können wir wie bei der Symmetrieverhalten Untersuchung die Funktion .subs nutzen um die passenden Einträge der Funktion zu verändern.\nGib im folgenden Code Block einen Code an, der den Y-Achsenschnittpunkt berechnet und ausgibt für die Beispielfunktion: \\(f(x)=x^2+4x+7\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn dir das gelungen ist, gibt es hier nichts mehr zu tun, versuche Dich gerne an einem der anderen Kapitel.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Y-Achsenschnittpunkte bestimmen"
    ]
  },
  {
    "objectID": "achsenschnittpunkte.html#bestimmung-des-y-achsenabschnitts",
    "href": "achsenschnittpunkte.html#bestimmung-des-y-achsenabschnitts",
    "title": "Y-Achsenschnittpunkte ermitteln",
    "section": "",
    "text": "Davon ausgehend, dass die Funktion bei \\(x=0\\) definiert ist, ist es nicht all zu schwierig den Y-Achsenabschnitt zu bestimmen.\nHierfür können wir wie bei der Symmetrieverhalten Untersuchung die Funktion .subs nutzen um die passenden Einträge der Funktion zu verändern.\nGib im folgenden Code Block einen Code an, der den Y-Achsenschnittpunkt berechnet und ausgibt für die Beispielfunktion: \\(f(x)=x^2+4x+7\\)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn dir das gelungen ist, gibt es hier nichts mehr zu tun, versuche Dich gerne an einem der anderen Kapitel.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Y-Achsenschnittpunkte bestimmen"
    ]
  },
  {
    "objectID": "ableitungen.html",
    "href": "ableitungen.html",
    "title": "Ableitungen berechnen",
    "section": "",
    "text": "Eine Ableitung ist eine Funktion, die den Differenzenquotienten bzw. die Steigung einer Funktion an jeder Stelle angibt. Für eine Ableitung sind nur nicht-konstante Werte relevant, da diese keinen Einfluss auf die Steigung haben können.\nDie allgemeinen Ableitungsregeln sollten Dir bekannt sein, aber falls sie vergessen wurden, folgt hier eine kurze Zusammenfassung.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Ableitungen berechnen"
    ]
  },
  {
    "objectID": "ableitungen.html#spezifische-funktionen-und-ihre-ableitungen",
    "href": "ableitungen.html#spezifische-funktionen-und-ihre-ableitungen",
    "title": "Ableitungen berechnen",
    "section": "Spezifische Funktionen und ihre Ableitungen",
    "text": "Spezifische Funktionen und ihre Ableitungen\nNeben diesen allgemeinen Regeln gibt es bestimmte Funktionen, deren Ableitungen fest definiert sind und die du auswendig kennen solltest. Wenn diese Funktionen in Kombination mit anderen Termen auftreten, wendest Du die oben genannten allgemeinen Regeln an.\n\nExponentialfunktion: Die Ableitung der Exponentialfunktion ist:\n\n\\(f(x) = e^x \\implies f'(x) = e^x\\)\n\nNatürlicher Logarithmus: Die Ableitung des natürlichen Logarithmus ist:\n\n\\(f(x) = \\ln(x) \\implies f'(x) = \\frac{1}{x}\\)\n\nTrigonometrische Funktionen: Die Ableitungen der trigonometrischen Funktionen sind:\n\n\\(f(x) = \\sin(x) \\implies f'(x) = \\cos(x)\\)\n\\(f(x) = \\cos(x) \\implies f'(x) = -\\sin(x)\\)",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Ableitungen berechnen"
    ]
  },
  {
    "objectID": "ableitungen.html#aufgabe-zum-ableitungen-berechnen",
    "href": "ableitungen.html#aufgabe-zum-ableitungen-berechnen",
    "title": "Ableitungen berechnen",
    "section": "Aufgabe zum Ableitungen berechnen",
    "text": "Aufgabe zum Ableitungen berechnen\nDa dieses Kapitel durch die Funktion sympy.diff recht einfach ist, eine schwierige Aufgabe!\nErstelle einen Code, welcher nicht nur die erste, sondern auch die zweite und dritte Ableitung einer beliebigen Funktion bestimmt.\nVersuche hierbei den Code so effizient wie möglich zu schreiben.\nD.h. nur weil Du einen funktionierenden Code hast, heißt das nicht, dass er effizient ist.\nProbier Dich ein bisschen aus.\nDenk dabei daran, dass es auch eine passende Ausgabe geben sollte.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNachdem Du jetzt einen Code zum Ableitungen bestimmen hast, betrachten wir, was wir an den Ableitungen erkennen können. Als nächstes sei Monotonieverhalten untersuchen empfohlen.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Ableitungen berechnen"
    ]
  },
  {
    "objectID": "asymptoten.html",
    "href": "asymptoten.html",
    "title": "Asymptoten bestimmen",
    "section": "",
    "text": "Bevor es um die Python-Implementierung geht, ist es wichtig zu wissen, was eine Asymptote im Allgemeinen ist. Eine Asymptote eine Kurve der sich die Funktion im Unendlichen immer weiter annähert.\nWichtig: Das heißt nicht, dass sich die Funktion und die Kurve (meistens handelt es sich um eine Gerade) nie treffen. Es gibt hier unterschiedliche Möglichkeiten.\n\nSie treffen sich nie, z.B.: \\(f(x)=\\frac{1}{x}\\)\nSie treffen sich endlich oft, bevor sie sich im Unendlichen nicht mehr treffen, z.B.: \\(f(x) = \\frac{x^3 + 2x^2 + 1}{x^2 + 1}\\)\nSie treffen sich unendlich oft, da die Funktion um die Asymptote oszilliert (d.h. in Form einer Schwingung) also diese auch unendlich oft nicht schneidet, aber bei jeder Schwingung einmal schneidet z.B.: \\(f(x) = \\frac{\\sin(x)}{x}\\)\n\n\nLineare Asymptoten:\n\nVertikale Asymptoten\nHorizontale Asymptoten\nSchiefe Asymptoten\n\nNicht-lineare Asymptoten",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Asymptoten bestimmen"
    ]
  },
  {
    "objectID": "asymptoten.html#vertikale-asymptoten",
    "href": "asymptoten.html#vertikale-asymptoten",
    "title": "Asymptoten bestimmen",
    "section": "Vertikale Asymptoten",
    "text": "Vertikale Asymptoten\nEine vertikale Asymptote ist eine senkrechte Gerade der Form \\(x = a\\), an die sich die Funktion annähert. Solche Asymptoten treten typischerweise an Stellen auf, an denen die Funktion Definitionslücken hat, z.B. bei Division durch Null.\nEs kann jedoch auch bei anderen Funktionen wie Logarithmen auftreten der Einfachheit werden jedoch nur Fälle mit Division durch Null betrachtet. Fortgeschrittene können eine Abfrage für eine Logarithmusfunktion gerne mit einbauen.\nDer Graph der Funktion \\(f(x)\\) hat bei \\(x=a\\) eine vertikale Asymptote, wenn mindestens einer der folgenden Grenzwerte gilt: \\[ \\lim_{x \\to a^+} f(x) = \\pm\\infty \\quad \\text{oder} \\quad \\lim_{x \\to a^-} f(x) = \\pm\\infty \\]\n\nPython-Implementierung: Vertikale Asymptoten finden\nUm die Vertikale Asymptote zu finden muss also wie im Definitionsbereich Abschnitt vorgegangen werden. Eine kleine Erinnerung an die Grundlagen aus dem Abschnitt:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAufgabe\nErstelle einen Code, der für eine beliebige Funktion die vertikalen Asymptoten bestimmt und ausgibt.\nBeachte dabei, eine Asymptote ist nur an einer Stelle vorhanden an der \\(\\text{der Nenner}=0 \\text{ ist und der Zähler } \\neq 0\\).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipps 1:\n\n\n\n\n\n\nDu musst zu erst wie in dem Abschnitt oben Deine Variable und Funktion definieren\n\nDann kannst Du Zähler und Nenner bestimmen (if Abfrage, da es möglicherweise keinen Nenner gibt)\nJetzt kannst du den Nenner gleich Null setzten.\nDie Werte dafür sind deine potentiellen Nullstellen\n\n\n\n\n\n\n\n\n\n\nNoteTipps 2:\n\n\n\n\n\n\nNun musst Du die potentiellen Nullstellen, noch darauf testen, ob evtl. der Zähler an der Stelle auch Null ist, falls nicht gibt es für die X Werte Asymptoten\nÜberleg wie du die Bedingungen überprüfst (was musst du Gleichsetzen?)\nGib die Asymptoten dem Nutzer aus.",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Asymptoten bestimmen"
    ]
  },
  {
    "objectID": "asymptoten.html#horizontale-asymptoten",
    "href": "asymptoten.html#horizontale-asymptoten",
    "title": "Asymptoten bestimmen",
    "section": "Horizontale Asymptoten",
    "text": "Horizontale Asymptoten\nEine horizontale Asymptote ist eine horizontale Gerade, der Form \\(y=a\\), an die sich die Funktion annähert in ihrem Globalverhalten\nDie Gerade \\(y=a\\) ist eine horizontale Asymptote von \\(f(x)\\), wenn für \\(a\\in \\mathbb{R}\\) gilt: \\[ \\lim_{x \\to \\infty} f(x) = a \\quad \\text{oder} \\quad \\lim_{x \\to -\\infty} f(x) = a \\]\n\nPython-Implementierung: Horizontale Asymptoten finden\nHier wird wie in Globalverhalten untersuchen vor, d.h. es es werden die sympy.limit’s bestimmt, es benötigt jedoch noch einen Schritt der bisher noch nicht genutzt wurde, es existiert nur eine horizontale Asymptote, falls der Wert reel ist.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp:\n\n\n\n\n\n\nDie Funktion .is_finite kann bestimmten, ob ein Wert endlich ist oder nicht.\nD.h. mit Hilfe dieser Funktion kann eine passende Ausgabe generiert werden.\n\n\n\n\n\n\n\n\n\n\nNoteTipp2:\n\n\n\n\n\n\nEine Abfrage könnte z.B. so aussehen:\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nEs sollte idealerweise für jede Eventualität eine solche Abfrage geben.",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Asymptoten bestimmen"
    ]
  },
  {
    "objectID": "asymptoten.html#schiefe-asymptoten",
    "href": "asymptoten.html#schiefe-asymptoten",
    "title": "Asymptoten bestimmen",
    "section": "Schiefe Asymptoten",
    "text": "Schiefe Asymptoten\nEine schiefe (oder schräge) Asymptote ist eine Gerade der Form \\(y = mx + b\\), der sich die Funktion annähert.\nSie tritt bei gebrochen-rationalen Funktionen auf, wenn der Grad des Zählerpolynoms genau um eins größer ist als der Grad des Nennerpolynoms UND bei der Polynomdivision ein Rest existiert. Das Ergebnis der Polynomdivision ist die Geradengleichung der Asymptote.\nDie Funktion \\(f\\) hat eine schiefe Asymptote \\(f_a\\), wenn gilt: \\[ \\lim_{x \\to \\infty} f(x) = f_a(x) \\quad \\text{oder} \\quad \\lim_{x \\to -\\infty} f(x) = f_a(x) \\]\nBeziehungsweise: \\[ \\lim_{x \\to \\infty} | f(x) - f_a(x) | = 0 \\quad \\text{oder} \\quad \\lim_{x \\to -\\infty} | f(x) - f_a(x) | = 0 \\]\n\nPython-Implementierung: Schiefe Asymptoten finden\nDie Polynomdivision kann in Python wie viele der Rechnungen, die wir in anderen Kapiteln bereits getätigt haben mit der sympy Bibliothek durchführen.\nDie passende Funktion heißt sympy.div(). Der Grad einer Funktion kann mit sympy.degree\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteTipp:\n\n\n\n\n\n\nÜberlege zuerst, was musst du alles überprüfen?\nGehe dafür noch einmal in Ruhe durch was oben steht, wie eine schiefe Asymptote bestimmt wird, wann sie existiert.\n\n\n\n\n\n\n\n\n\n\nNoteTipp2:\n\n\n\n\n\n\nZuerst solltest Du, so wie immer sympyimportieren\nDann die Variable und die Funktion definieren (Denk dran die Funktion in ein sympy Objekt mit sympy.sympify zu verwandeln)\nDanach solltest Du Zähler, Nenner auslesen\n\n\n\n\n\n\n\n\n\n\nNoteTipp3:\n\n\n\n\n\n\nDann kannst Du den Grad auslesen, lies am besten den Grad des Zählers und des Nenners aus.\nDann bist Du praktisch fertig, es fehlt nur noch eine passende Ausgabe für den Nutzer zu gestalten indem du testest, ób die Bedingung für eine schiefe Asymptote erfüllt ist.",
    "crumbs": [
      "Globalverhalten und Asymptoten",
      "Asymptoten bestimmen"
    ]
  },
  {
    "objectID": "extrempunkte.html",
    "href": "extrempunkte.html",
    "title": "Extremstellen berechnen",
    "section": "",
    "text": "Als Extrempunkt oder auch Extremum wird ein Punkt bezeichnet der “tiefer,höher” als alle anderen Punkte im Umfeld liegt. Als Analogie können ein Berg, bzw. ein Tal betrachtet werden.\n\nDie Spitze des Bergs ist ein Hochpunkt, also ein Extrempunkt, der höher ist als nebenliegende Funktionswerte.\n\nDie tiefste Stelle ist ein Tiefpunkt, also ein Extrempunkt, der niedriger ist als nebenliegende Funktionswerte.\nIm weiteren Verlauf dieses Kapitels wird die Benennung Minimum=Tiefpunkt und Maximum=Hochpunkt genutzt.\n\n\n\nDie Differenzierung zwischen lokalen- und globalen- Extrempunkten ist nicht so leicht zu verstehen.\nEine Funktion kann mehrere lokale Extrema haben, jedoch höchstens ein globales Maximum und höchstens ein globales Minimum.\nDamit eine Funktion an der Stelle \\(x\\) ein Extremum hat müssen zwei Bedingungen erfüllt sein.\n\n\\(f'(x)=0\\) Das bedeutet, dass an der Stelle die Steigung Null ist, d.h. der Wert nicht weiter ansteigen/abfallen kann.\n\n\\(f''(x) =|= 0\\) Das bedeutet, dass an der Stelle die Krümmung entweder positiv, oder negativ ist, das sorgt dafür, dass das Monotonieverhalten ändert.\n\nDer 2. Punkt kann auch anders geprüft werden. Falls die zweite Ableitung nicht bestimmt werden soll, kann ein Wert minimal kleiner und minimal größer als \\(x\\) in die Ableitung eingesetzt werden, wenn sich die Vorzeichen unterscheiden, so ist dort ein Extremum.\nFalls für den kleineren \\(x\\) Wert das Vorzeichen Minus, und für den größeren Plus ist, handelt es sich um einen Tiefpunkt,\nFalls für den kleineren \\(x\\) Wert das Vorzeichen Plus, und für den größeren Minus ist, handelt es sich um einen Hochpunkt.\n\n\nDamit ein lokales Maximum/Minimum ein globales Maximum/Minimum ist, muss eine weitere Bedingung gelten:\nFür ein globales Maximum \\(x_{max}\\) gilt, \\(f(x_{max}) \\ge f(x) \\forall x \\in Def.Bereich\\)\nFür ein globales Minimum \\(x_{min}\\) gilt, \\(f(x_{min}) \\le f(x) \\forall x \\in Def.Bereich\\)\n\n\n\n\nSattelpunkt wird ein potentielles Extremum genannt, welches jedoch keins ist.\nPotentiell in soweit, als dass für einen Sattelpunkt gilt, dass: \\(f'(x_{sat})=0\\) ABER im Gegensatz zum Extremum muss für die zweite Ableitung gelten, dass \\(f''(x_{sat})=0\\).\nEin Sattelpunkt ist also ein Punkt in einer Funktion an dem die Steigung Null ist sich vorher und nachher in ihrer Ausrichtung jedoch nicht ändert.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Extrempunkte/ Sattelpunkte bestimmen"
    ]
  },
  {
    "objectID": "extrempunkte.html#lokale-vs.-globale-extrema",
    "href": "extrempunkte.html#lokale-vs.-globale-extrema",
    "title": "Extremstellen berechnen",
    "section": "",
    "text": "Die Differenzierung zwischen lokalen- und globalen- Extrempunkten ist nicht so leicht zu verstehen.\nEine Funktion kann mehrere lokale Extrema haben, jedoch höchstens ein globales Maximum und höchstens ein globales Minimum.\nDamit eine Funktion an der Stelle \\(x\\) ein Extremum hat müssen zwei Bedingungen erfüllt sein.\n\n\\(f'(x)=0\\) Das bedeutet, dass an der Stelle die Steigung Null ist, d.h. der Wert nicht weiter ansteigen/abfallen kann.\n\n\\(f''(x) =|= 0\\) Das bedeutet, dass an der Stelle die Krümmung entweder positiv, oder negativ ist, das sorgt dafür, dass das Monotonieverhalten ändert.\n\nDer 2. Punkt kann auch anders geprüft werden. Falls die zweite Ableitung nicht bestimmt werden soll, kann ein Wert minimal kleiner und minimal größer als \\(x\\) in die Ableitung eingesetzt werden, wenn sich die Vorzeichen unterscheiden, so ist dort ein Extremum.\nFalls für den kleineren \\(x\\) Wert das Vorzeichen Minus, und für den größeren Plus ist, handelt es sich um einen Tiefpunkt,\nFalls für den kleineren \\(x\\) Wert das Vorzeichen Plus, und für den größeren Minus ist, handelt es sich um einen Hochpunkt.\n\n\nDamit ein lokales Maximum/Minimum ein globales Maximum/Minimum ist, muss eine weitere Bedingung gelten:\nFür ein globales Maximum \\(x_{max}\\) gilt, \\(f(x_{max}) \\ge f(x) \\forall x \\in Def.Bereich\\)\nFür ein globales Minimum \\(x_{min}\\) gilt, \\(f(x_{min}) \\le f(x) \\forall x \\in Def.Bereich\\)",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Extrempunkte/ Sattelpunkte bestimmen"
    ]
  },
  {
    "objectID": "extrempunkte.html#sattelpunkte",
    "href": "extrempunkte.html#sattelpunkte",
    "title": "Extremstellen berechnen",
    "section": "",
    "text": "Sattelpunkt wird ein potentielles Extremum genannt, welches jedoch keins ist.\nPotentiell in soweit, als dass für einen Sattelpunkt gilt, dass: \\(f'(x_{sat})=0\\) ABER im Gegensatz zum Extremum muss für die zweite Ableitung gelten, dass \\(f''(x_{sat})=0\\).\nEin Sattelpunkt ist also ein Punkt in einer Funktion an dem die Steigung Null ist sich vorher und nachher in ihrer Ausrichtung jedoch nicht ändert.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Extrempunkte/ Sattelpunkte bestimmen"
    ]
  },
  {
    "objectID": "extrempunkte.html#aufgabe-bestimmung-sattelpunkt",
    "href": "extrempunkte.html#aufgabe-bestimmung-sattelpunkt",
    "title": "Extremstellen berechnen",
    "section": "Aufgabe: Bestimmung Sattelpunkt",
    "text": "Aufgabe: Bestimmung Sattelpunkt\nEine leichte Aufgabe zum reinkommen.\nMithilfe der Erklärung oben sollte es hoffentlich nicht all zu schwer sein einen Code zu verfassen, welcher Eine Funktion testet, ob sie einen Sattelpunkt hat.\nIdeal wäre natürlich ein Code der nach Hochpunkt/Tiefpunkt, und Sattelpunkt überprüft\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Extrempunkte/ Sattelpunkte bestimmen"
    ]
  },
  {
    "objectID": "extrempunkte.html#aufgabe2-bestimmung-extrema-ohne-2.-ableitung",
    "href": "extrempunkte.html#aufgabe2-bestimmung-extrema-ohne-2.-ableitung",
    "title": "Extremstellen berechnen",
    "section": "Aufgabe2: Bestimmung Extrema ohne 2. Ableitung",
    "text": "Aufgabe2: Bestimmung Extrema ohne 2. Ableitung\nNach der Einstiegsaufgabe nun eine etwas kniffligere Aufgabe.\nWie in dem Erklärtext bereits erklärt wurde, gibt es nicht nur die bereits gecodete Variante der Extrema Prüfung, sondern noch mindestens eine weitere, welche keine 2. Ableitung benötigt.\nVerfasse einen Code, der ohne die 2. Ableitung zu bestimmen ebenfalls testet, ob Extrema hat und wenn wo diese sind.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn Du damit fertig bist geht es weiter mit Krümmungsverhalten.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Extrempunkte/ Sattelpunkte bestimmen"
    ]
  },
  {
    "objectID": "graphen.html",
    "href": "graphen.html",
    "title": "Graphen erstellen",
    "section": "",
    "text": "In diesem Abschnitt sollst Du lernen wie Du mit Hilfe von Python einen Graphen darstellen (plotten) kannst.\nHierbei gibt es mehrere Aspekte die für uns weiterhin wichtig sein werden.\n\nDas Grundgerüst\nEinen Graphen plotten\nMehrere Funktionen auf einmal plotten\nWie kann man Punkte in einen Graph plotten\nWie kann man Einzelheiten einstellen (Farbe, Strichstil etc.)\n\nIn diesem Abschnitt wird es keine Aufgaben als solche geben, jeder Code kann dafür bearbeitet werden, also teste dich gerne im Code herum, verändere Dinge und guck was passiert!\n\n\nZuerst benötigen wir das Grundgerüst, um eine Funktion überhaupt zeichnen zu können. Dazu importieren wir die matplotlib.pyplot Bibliothek, mithilfe von dieser können Graphen geplottet werden.\nWir importieren die Bibliothek als plt, damit können Funktionen deutlich kürzer geschrieben werden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipErklärungen zum Grundgerüst\n\n\n\n\n\n\nfig, ax = plt.subplots() wird hier genutzt, damit sich in diesem Tutorial in jedem Code ein neuer Graph erstellt und keine Werte aus dem letzten Block mit in den Graph geplottet werden.\nfig beschreibt die gesamte Abbildung (das Fenster)\nax ist der eigentliche Graph (das Koordinatensystem), auf dem wir zeichnen.\nplt.subplots ist eine der Möglichkeiten eine Grundlage zu schaffen auf der Graphen geplottet werden können. Es gibt auch die Möglichkeit plt.plot().\nplt.show(): Dieser Befehl ist entscheidend. Er nimmt alles, was bisher “gezeichnet” wurde, und zeigt es in der Ausgabe an. Ohne diesen Befehl siehst Du nichts!\n\n\n\n\n\n\n\nNachdem das Grundgerüst steht, können wir unseren ersten Graphen zeichnen.\nHierfür werden Datenpunkte benötigt, damit diese nicht einzeln eingetippt werden hilft dir numpy Bibliothek aus, indem mit np.linspace Werte zwischen 0 und 10 generiert werden (100 an der Zahl).\n\n\n\n\n\n\nTipWas ist Numpy? Eine kurze Erklärung\n\n\n\n\n\nNumpy (Numerical Python) ist eine der fundamentaleren Python Bibliotheken, diese bietet das rechnen und berechnen mit und von Matrizen/Vektoren und großen mehrdimensionalen Arrays an.\nAuch ist Numpy die Bibliothek welche für numerische Berechnungen genutzt wird.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zum Plotten eines Graphen\n\n\n\n\n\n\nMit np.linspace werden gleichverteilte Werte zwischen 0 und 10 generiert (100 an der Zahl).\nMit “ax.set_xlabel und ax.set_ylabel können x-/y- Achsen und Titel benannt werden.\n\nEine Andere Möglichkeit einen Graphen zu generieren ist (diese Möglichkeit mag simpler erscheinen, gradliniger, aber hat einige Probleme, wenn die Codeblöcke in diesem Abschnitt so geschrieben wären, könnte immer nur ein Graph auf einmal dargestellt werden und es würden auch immer alle anderen Funktionen nach dem durchführen des Codeblocks in allen anderen Graphen existent bleiben.):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n_Falls also das Problem besteht, dass nach durchführen dieses Codeblocks in den nächsten Graphen immer dieser Graphen mit abgebildet wird, bitte einmal die Seite neu laden und den obigen Code NICHT AUSFÜHREN.\n\n\n\n\n\n\nOft möchte man mehrere Funktionen in einem einzigen Graphen vergleichen.\nDas geht recht einfach mit der plot-Funktion, es wird jede Funktion einzeln geplottet Plt.show stellt dann alle geplotteten Funktionen dar. Matplotlib kümmert sich automatisch darum, jeder Linie eine andere Farbe zu geben.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zum Plotten mehrerer Funktionen\n\n\n\n\n\n\nDie Legende: Um eine Legende anzuzeigen, musst Du zwei Dinge tun:\n\nGib jedem plot ein label (z.B. ax.plot(x, y1, label=\"Sinus\")).\nRufe ax.legend() auf, um die Legende basierend auf den Labels tatsächlich zu zeichnen.\n\n\n\n\n\n\n\n\nManchmal wollen wir keine durchgehende Linie, sondern einzelne Datenpunkte darstellen, z.B. aus einem Experiment. Dafür eignet sich die scatter-Funktion hervorragend. Sie ist speziell dafür gemacht, eine Wolke von Punkten zu zeichnen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zum Plotten von Punkten\n\n\n\n\n\n\nEs gibt mehrere Möglichkeiten Punkte zu verteilen, es ist auch möglich ax.plot(x_punkte, y_punkte) zu verwenden. Nutze gern unterschiedliche Möglichkeiten und versuche die Unterschiede zu erkennen.\n\nWie im Graphen zu sehen bestehen sehr wohl auch die Möglichkeiten die Art und Farbe der Punkte zu verändern.\nDu kannst plot und scatter im selben Graphen kombinieren. Zeichne zuerst eine Funktionslinie mit plot und dann einzelne Messpunkte darüber mit scatter.\nProbiere das gerne aus! (indem du dir einen eigenen Block erstellst)\n\n\n\n\n\n\n\nEs gibt viele Einzelheiten die verändert werden können.\nIm folgenden Code wird eine Menge geändert auf unterschiedliche Arten und Weisen und in den Tipps wird dann erklärt was welche Veränderung herbeiführt.\nIm Grunde kann das folgende verändert werden:\n\nLinienstil (gestrichelt, gepunktet, …)\nMarkerstil (Kreis, Kreuze, …)\nLinienbreite\nFarbe\nForm der Markierung\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zur Anpassung\n\n\n\n\n\n\nFarben (color): Du kannst Farbnamen ('red', 'green'), Kurzcodes ('r', 'g', 'b', 'k' für schwarz) oder Hex-Codes ('#FF5733') verwenden.\nLinienstile (linestyle):\n\n'-' oder 'solid': Durchgezogene Linie (Standard)\n'--' oder 'dashed': Gestrichelte Linie\n':' oder 'dotted': Gepunktete Linie\n'-.' oder 'dashdot': Strich-Punkt-Linie\n\nMarker (marker):\n\n'o': Kreis\n'x': X\n'+': Plus\n's': Quadrat (square)\n'.' : Kleiner Punkt\n\nKurzschreibweise: Für einfache Stile kannst Du Farbe, Marker und Linienstil in einem einzigen String kombinieren, z.B. 'go--' für eine grüne (g), gestrichelte (--) Linie mit Kreismarkern (o).",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen erstellen"
    ]
  },
  {
    "objectID": "graphen.html#das-grundgerüst",
    "href": "graphen.html#das-grundgerüst",
    "title": "Graphen erstellen",
    "section": "",
    "text": "Zuerst benötigen wir das Grundgerüst, um eine Funktion überhaupt zeichnen zu können. Dazu importieren wir die matplotlib.pyplot Bibliothek, mithilfe von dieser können Graphen geplottet werden.\nWir importieren die Bibliothek als plt, damit können Funktionen deutlich kürzer geschrieben werden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipErklärungen zum Grundgerüst\n\n\n\n\n\n\nfig, ax = plt.subplots() wird hier genutzt, damit sich in diesem Tutorial in jedem Code ein neuer Graph erstellt und keine Werte aus dem letzten Block mit in den Graph geplottet werden.\nfig beschreibt die gesamte Abbildung (das Fenster)\nax ist der eigentliche Graph (das Koordinatensystem), auf dem wir zeichnen.\nplt.subplots ist eine der Möglichkeiten eine Grundlage zu schaffen auf der Graphen geplottet werden können. Es gibt auch die Möglichkeit plt.plot().\nplt.show(): Dieser Befehl ist entscheidend. Er nimmt alles, was bisher “gezeichnet” wurde, und zeigt es in der Ausgabe an. Ohne diesen Befehl siehst Du nichts!",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen erstellen"
    ]
  },
  {
    "objectID": "graphen.html#einen-graphen-plotten",
    "href": "graphen.html#einen-graphen-plotten",
    "title": "Graphen erstellen",
    "section": "",
    "text": "Nachdem das Grundgerüst steht, können wir unseren ersten Graphen zeichnen.\nHierfür werden Datenpunkte benötigt, damit diese nicht einzeln eingetippt werden hilft dir numpy Bibliothek aus, indem mit np.linspace Werte zwischen 0 und 10 generiert werden (100 an der Zahl).\n\n\n\n\n\n\nTipWas ist Numpy? Eine kurze Erklärung\n\n\n\n\n\nNumpy (Numerical Python) ist eine der fundamentaleren Python Bibliotheken, diese bietet das rechnen und berechnen mit und von Matrizen/Vektoren und großen mehrdimensionalen Arrays an.\nAuch ist Numpy die Bibliothek welche für numerische Berechnungen genutzt wird.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zum Plotten eines Graphen\n\n\n\n\n\n\nMit np.linspace werden gleichverteilte Werte zwischen 0 und 10 generiert (100 an der Zahl).\nMit “ax.set_xlabel und ax.set_ylabel können x-/y- Achsen und Titel benannt werden.\n\nEine Andere Möglichkeit einen Graphen zu generieren ist (diese Möglichkeit mag simpler erscheinen, gradliniger, aber hat einige Probleme, wenn die Codeblöcke in diesem Abschnitt so geschrieben wären, könnte immer nur ein Graph auf einmal dargestellt werden und es würden auch immer alle anderen Funktionen nach dem durchführen des Codeblocks in allen anderen Graphen existent bleiben.):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n_Falls also das Problem besteht, dass nach durchführen dieses Codeblocks in den nächsten Graphen immer dieser Graphen mit abgebildet wird, bitte einmal die Seite neu laden und den obigen Code NICHT AUSFÜHREN.",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen erstellen"
    ]
  },
  {
    "objectID": "graphen.html#mehrere-funktionen-auf-einmal-plotten",
    "href": "graphen.html#mehrere-funktionen-auf-einmal-plotten",
    "title": "Graphen erstellen",
    "section": "",
    "text": "Oft möchte man mehrere Funktionen in einem einzigen Graphen vergleichen.\nDas geht recht einfach mit der plot-Funktion, es wird jede Funktion einzeln geplottet Plt.show stellt dann alle geplotteten Funktionen dar. Matplotlib kümmert sich automatisch darum, jeder Linie eine andere Farbe zu geben.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zum Plotten mehrerer Funktionen\n\n\n\n\n\n\nDie Legende: Um eine Legende anzuzeigen, musst Du zwei Dinge tun:\n\nGib jedem plot ein label (z.B. ax.plot(x, y1, label=\"Sinus\")).\nRufe ax.legend() auf, um die Legende basierend auf den Labels tatsächlich zu zeichnen.",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen erstellen"
    ]
  },
  {
    "objectID": "graphen.html#wie-können-punkte-in-einen-graph-plotten",
    "href": "graphen.html#wie-können-punkte-in-einen-graph-plotten",
    "title": "Graphen erstellen",
    "section": "",
    "text": "Manchmal wollen wir keine durchgehende Linie, sondern einzelne Datenpunkte darstellen, z.B. aus einem Experiment. Dafür eignet sich die scatter-Funktion hervorragend. Sie ist speziell dafür gemacht, eine Wolke von Punkten zu zeichnen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zum Plotten von Punkten\n\n\n\n\n\n\nEs gibt mehrere Möglichkeiten Punkte zu verteilen, es ist auch möglich ax.plot(x_punkte, y_punkte) zu verwenden. Nutze gern unterschiedliche Möglichkeiten und versuche die Unterschiede zu erkennen.\n\nWie im Graphen zu sehen bestehen sehr wohl auch die Möglichkeiten die Art und Farbe der Punkte zu verändern.\nDu kannst plot und scatter im selben Graphen kombinieren. Zeichne zuerst eine Funktionslinie mit plot und dann einzelne Messpunkte darüber mit scatter.\nProbiere das gerne aus! (indem du dir einen eigenen Block erstellst)",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen erstellen"
    ]
  },
  {
    "objectID": "graphen.html#wie-kann-man-einzelheiten-einstellen",
    "href": "graphen.html#wie-kann-man-einzelheiten-einstellen",
    "title": "Graphen erstellen",
    "section": "",
    "text": "Es gibt viele Einzelheiten die verändert werden können.\nIm folgenden Code wird eine Menge geändert auf unterschiedliche Arten und Weisen und in den Tipps wird dann erklärt was welche Veränderung herbeiführt.\nIm Grunde kann das folgende verändert werden:\n\nLinienstil (gestrichelt, gepunktet, …)\nMarkerstil (Kreis, Kreuze, …)\nLinienbreite\nFarbe\nForm der Markierung\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTipTipps zur Anpassung\n\n\n\n\n\n\nFarben (color): Du kannst Farbnamen ('red', 'green'), Kurzcodes ('r', 'g', 'b', 'k' für schwarz) oder Hex-Codes ('#FF5733') verwenden.\nLinienstile (linestyle):\n\n'-' oder 'solid': Durchgezogene Linie (Standard)\n'--' oder 'dashed': Gestrichelte Linie\n':' oder 'dotted': Gepunktete Linie\n'-.' oder 'dashdot': Strich-Punkt-Linie\n\nMarker (marker):\n\n'o': Kreis\n'x': X\n'+': Plus\n's': Quadrat (square)\n'.' : Kleiner Punkt\n\nKurzschreibweise: Für einfache Stile kannst Du Farbe, Marker und Linienstil in einem einzigen String kombinieren, z.B. 'go--' für eine grüne (g), gestrichelte (--) Linie mit Kreismarkern (o).",
    "crumbs": [
      "Graphen zeichnen",
      "Graphen erstellen"
    ]
  },
  {
    "objectID": "grundlagen.html",
    "href": "grundlagen.html",
    "title": "Python Grundlagen",
    "section": "",
    "text": "Diese Seite dient als Erinnerung an die Grundlagen von Python, wenn die Inhalte dieser Seite nicht bearbeitet und oder bekannt sind ist die Weiterarbeit im Tutorial schwierig.\n\nVariablenFallunterscheidungenDatentypenListenFunktionenSchleifenBibliotheken\n\n\nFür einen leichten Einstieg in Python beschäftigen wir uns zunächst mit Variablen. Dabei ist der Unterschied zu Variablen in der Mathematik hervorzuheben. Im Folgenden ein kleines Beispiel:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDies ist eine Variablenzuweisung. Die Variablen können nach der Zuweisung für die Berechnung verwendet werden. Ein paar Beispiele siehst du im folgenden Code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nFür die Multiplikation wird in Python ein Sternchen * verwendet. Dividieren kannst du in Python mit dem Schrägstrich /.\nAm folgenden Beispiel lässt sich der Unterschied zu Variablen in der Mathematik verdeutlichen:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWie du siehst können sich Variablen verändern bzw. neu zugewiesen werden. In Python hat eine Variable immer den Wert, der ihr zuletzt zugewiesen worden ist.\nStatt einzelner Anweisungen wollen wir uns jetzt ein ganzes Programm ansehen. Stellen wir uns vor, wir fahren mit dem Auto eine längere Strecke und notieren uns dabei den Kilometerstand des Fahrzeugs zu Beginn der Fahrt sowie zu gewissen Zeitpunkten während der Fahrt gemeinsam mit der bisherigen Fahrtdauer. Diese Informationen können wir nutzen, um uns die Durchschnittsgeschwindigkeit der ganzen Fahrt sowie in den Teilintervallen zu berechnen. Ein einfaches Python-Programm, das dies für uns erledigt, ist das folgende:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAn diesem Beispiel siehst du zudem, dass Variablen auch mehr als einen Buchstaben haben können. Es können in Python auch Variablen durch ganze Wörter definiert werden, was zudem sinnvoll ist, um den Code mit passenden Variablennamen besser verstehen zu können.\n\nAufgabe zu Variablen\nProbiere einmal den Code so zu verändern, dass die Berechnung durch eine 4. und 5. Messung erweitert wird. Bei der vierten Messung war der Kilometerstand bei 13281km und 75 Minuten nach Fahrtbeginn. Bei der fünften Messung betrug der Kilometerstand 13334km und 119 Minuten nach Fahrtbeginn. Diese Berechnungen sollen auch mit dem Befehl print() ausgegeben werden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nBei den Datentypen haben wir bereits eine Fallunterscheidung gesehen. Bei einer Fallunterscheidung möchte man zwei oder mehr Fälle unterscheiden. Übersetzt heißt dies wenn “x”, mache “y”, ansonsten mache “z”. Betrachte das folgende Beispiel:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nProbiere es selbst aus und schreibe einen Code, in dem du zwischen a und b unterscheidest. Wenn a gleich b ist soll ein entsprechender Text ausgegeben werden und wenn sie unterschiedlich sind ein entsprechend anderer Text.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn du mehr als zwei Fälle unterscheiden möchtest, kannst du “elif” zwischen “if” und “else” verwenden. Dies ist die Kurzfassung für “else if”. Betrachte den folgenden Code:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEs ist nicht notwendig immer if und else zu verwenden. Du kannst auch nur if verwenden, wenn du im else-Fall nichts machen möchtest:\n\nAufgabe zu Fallunterscheidungen\nÄndere den folgenden Code und probiere aus, was passiert, wenn a ungleich b ist.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nEs gibt verschiedene Datentypen, die in Python unterschieden werden. Ganzzahlen heißen Integer. Dezimalzahlen werden “Float” genannt. Sobald in einer Berechnung eine Dezimalzahl vorkommt, ist das Ergebnis ebenfalls ein Float, auch, wenn es eigentlich zu einer Ganzzahl ist. Im folgenden Beispiel kannst du dies sehen:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nDie Division ergibt immer eine Gleitkommazahl, auch wenn ein Integer von einem anderen dividiert wird:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nEin weiterer Datentyp ist der sogenannte Boolean, der als wahr oder falsch ausgewertet wird. Führe den folgenden Code aus und verändere ihn so, dass “falsch” ausgegeben wird.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIm obigen Beispiel haben wir einen Vergleichsoperator “==” verwendet, um auf Gleichheit zu überprüfen. Möchte man abfragen, ob a ungleich einem bestimmten Wert ist, sagen wir 7, so verwendet man “a!=7”.\n\nAufgabe zu Datentypen\nSchreibe nun einmal das Programm so um, dass du abfragst, ob a ungleich 8 ist. Wenn dies der Fall ist, schreibe “wahr”, wenn nicht, schreibe “falsch”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nNeben den numerischen Datentypen, gibt es weitere, worin sich mehrere Zahlen in einer Menge darstellen lassen. Diese nennen sich Listen und können sowohl direkt mit Zahlen erstellt werden, als auch zunächst leer gelassen werden. Betrachte die folgenden Beispiele:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIm obigen Beispiel wird eine Liste aus fünf Zahlen initialisiert. Anschließend wird die Liste und der fünfte Eintrag der Liste ausgegeben. Der Grund, wieso wir dabei “Liste[4]” und nicht “Liste[5]” verwenden, ist, weil der Index der Listeneinträge bei null beginnt. So ist der erste Listeneintrag bei “Liste[0]” und der fünfte bei “Liste[4]”.\nIm nächsten Beispiel werden wir eine leere Liste erstellen und dann zwei Einträge hinzufügen. Anschließend verändern wir einen der Einträge. Beachte die Ausgabe:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAufgabe zu Listen\nVersuch es einmal selbst und erstelle eine Liste mit den Einträgen 2, -13, 6 und 4. Gib die Liste aus. Verändere denn den zweiten Eintrag zu einer 4 und gib die neue Liste aus.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nBisher haben wir Code geschrieben, der von oben nach unten ausgeführt wird. Wenn wir eine Berechnung wie die der Fakultät oder der Durchschnittsgeschwindigkeit an verschiedenen Stellen mit unterschiedlichen Werten wiederholen wollten, müssten wir den Code kopieren und einfügen. Das ist unübersichtlich und fehleranfällig.\nFunktionen lösen dieses Problem. Eine Funktion ist ein benannter, wiederverwendbarer Codeblock, der eine bestimmte Aufgabe erfüllt. Man definiert sie einmal und kann sie dann beliebig oft “aufrufen”.\nEine Funktion wird mit dem Schlüsselwort def definiert, gefolgt von einem Namen und Klammern (). Innerhalb der Klammern können Parameter (Eingabewerte) übergeben werden. Mit return gibt die Funktion ein Ergebnis zurück.\n\nf-Strings in Python\nIm folgenden verwenden wir sogenannte f-Strings für die print()-Ausgaben. Ein f-String wird durch ein f vor dem öffnenden Anführungszeichen eingeleitet (z.B. f\"Hallo\").\nDer große Vorteil ist, dass man Variablen und Ausdrücke direkt in den Text einbetten kann, indem man sie in geschweifte Klammern {} setzt. Das macht den Code oft deutlich lesbarer.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAufgabe zu Funktionen\nSchreibe eine Funktion mit dem Namen rechteck_flaeche, die die Länge und Breite eines Rechtecks als Parameter entgegennimmt und dessen Flächeninhalt berechnet und zurückgibt.\n\nDie Funktion soll zwei Parameter annehmen: laenge und breite.\nSie soll das Produkt der beiden Parameter berechnen und mit return zurückgeben.\nTeste deine Funktion mit unterschiedlichen Wertepaaren und lass diese ausgeben\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nZum Verständnis ein paar Beispiele und eine Aufgabe dazu:\nFor-Schleifenwiederholen sich über einen gewissen Intervall. Das Schlüsselwort range beschreibt hierbei das Intervall von \\(a\\) bis \\(b\\). Dabei ist \\(a\\) der Start der Iteration und \\(b\\) der Endpunkt der Iteration.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn eine Rechnung/ eine Abfrage mehrfach ausgeführt werden soll, is dies vereinfacht mit Hilfe von Schleifen möglich. While-Schleifenwiederholen hierbei den Code solange wie eine gewisse Bedingung erfüllt ist. Ein kleines Bsp.:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAufgabe zu For-/While- Schleifen\nDie obigen Blöcke sind absichtlich bearbeitbar, teste ein wenig in ihnen herum um ein Verständnis dafür zu entwickeln wie die unterschiedlichen Systeme funktionieren.\nWenn du dir sicher bist, dass du verstanden hast wie beides funktioniert, versuche gerne mal ein Programm zu schreiben, welches eine Fakultät berechnet, indem du eine While-Schleife verwendest.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nDeine While-Schleife wird ein sehr ähnliches Grundgerüst haben, wie die For-Schleife Auch wirst du die folgenden Dinge benötigen:\n\n\n\nInitialisierung\nresult = 1 und i = 1\nSchleifenlogik\nWiederhole solange i &lt;= n, multipliziere jeweils result = result * i\nZähler hochzählen!\ni = i + 1 (→ sonst Endlosschleife)\nZusatz: Was passiert bei n = 0?\n\n\n\nHier eine mögliche Lösung für eine While Schleife, falls du absolut nicht mehr weiter weist\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nEine der größten Stärken von Python ist die riesige Auswahl an Bibliotheken (auch Module genannt). Eine Bibliothek ist eine Sammlung von vordefinierten Funktionen und Konstanten, die du in deinem Code verwenden kannst, ohne das Rad neu erfinden zu müssen.\nUm eine Bibliothek zu nutzen, musst du sie mit dem import-Befehl am Anfang deines Codes “laden”. Für dieses Tutorial sind die numpy und matplotlib Bibliotheken besonders relevant:\nDer Effizienz halber werden Bibliotheken meist nicht vollständig importiert sondern ein gewisser Kernabschnitt der Bibliothek.\n1. numpy – Für numerische Berechnungen (unser Hauptwerkzeug!)\nnumpy ist die wichtigste Bibliothek für dieses Tutorial. Sie ist optimiert für die Arbeit mit Vektoren und Matrizen (in NumPy arrays genannt). Man importiert sie üblicherweise mit dem Kürzel np. Das sorgt dafür, dass im weiteren Verlauf des Programms np.array verwendet werden kann anstatt von numpy.array.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n2. matplotlib – Für die Visualisierung von Daten\nMit matplotlib können wir unsere Daten und Ergebnisse als Graphen und Diagramme darstellen. Das hilft enorm, um Zusammenhänge zu verstehen.\nIn diesem Fall wird das Kürzel plt für matplotlib.pyplot verwendet. Das zeigt, wie praktisch Aliase sind, da man statt matplotlib.pyplot.plot() einfach plt.plot() schreiben kann. Wichtig ist hierbei auch, dass pyplot ein spezifisches Untermodul von matplotlib ist, das explizit importiert werden muss. Ein einfaches import matplotlib würde nicht ausreichen, um auf Funktionen wie plot() zuzugreifen.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nMithilfe von matplotlib können nicht nur Graphen von Funktionen dargestellt werden, sondern auch Datenpunkte graphisch dargestellt werden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Python Grundlagen"
    ]
  },
  {
    "objectID": "kruemmungsverhalten.html",
    "href": "kruemmungsverhalten.html",
    "title": "Krümmungsverhalten untersuchen",
    "section": "",
    "text": "Die Krümmung einer Funktion beschreibt, wie sich der Graph “krümmt”, bzw. “biegt” d.h. wie weit sich die Funktion von einer Geraden entfernt. Es hilft sich das als Analogie mit Hilfe einer Straße vorzustellen, die Krümmung gibt an, ob die Straße nach rechts oder nach links abknickt und wie stark der Knick ist.\nDie Krümmung eines Funktion wird in dem Graphen der ersten Ableitung, dadurch erkenntlich, dass es die Stellen sind, an denen sich das Monotonieverhalten verändert.\nWichtig bei Betrachtung des “Monotonieverhaltens” darf nicht außer Acht bleiben, dass hier das Monotonieverhalten der ersten Ableitung betrachtet wird. Mathematisch unterscheiden wir zwei Hauptarten der Krümmung:\n\nLinksgekrümmt (konvex): Der Graph “knickt” sich nach oben. Wenn man sich auf dem Graphen bewegt, biegt er sich nach links.\nRechtsgekrümmt (konkav): Der Graph “knickt” sich nach unten. Wenn man sich auf dem Graphen bewegt, biegt er sich nach rechts.\n\n\n\nUm das Krümmungsverhalten einer Funktion zu bestimmen, nutzen wir die zweite Ableitung \\(f''(x)\\). Da wir dort, wie oben beschrieben die Stellen finden, an denen die Änderungsrate der Steigung Null ist. Die Schritte zur Bestimmung des Krümmungsverhaltens sind wie folgt:\n\nZweite Ableitung bilden: Berechne die zweite Ableitung \\(f''(x)\\) der Funktion \\(f(x)\\).\nDritte Ableitung bilden: Berechne die dritte Ableitung \\(f'''(x)\\) der Funktion \\(f(x)\\).\nNullstellen der zweiten Ableitung finden: Bestimme die Nullstellen der zweiten Ableitung, indem du die Gleichung \\(f''(x) = 0\\) löst. Diese Nullstellen sind potenzielle Wendepunkte, an denen sich das Krümmungsverhalten ändern könnte.\nIntervalle aufstellen: Die Nullstellen von \\(f''(x)\\) bilden die Grenzen der Intervalle.\nVorzeichen von \\(f'''(x)\\) prüfen: Wähle für jedes Intervall einen beliebigen Wert innerhalb des Intervalls aus. Setze diesen Wert in \\(f''(x)\\) ein. Das Vorzeichen des Ergebnisses verrät dir das Krümmungsverhalten in diesem gesamten Intervall:\n\n\\(f'''(x) &gt; 0 \\implies\\) Der Graph ist in diesem Intervall linksgekrümmt (konvex).\n\\(f'''(x) &lt; 0 \\implies\\) Der Graph ist in diesem Intervall rechtsgekrümmt (konkav).",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Krümmungsverhalten untersuchen"
    ]
  },
  {
    "objectID": "kruemmungsverhalten.html#krümmungsverhalten-bestimmen",
    "href": "kruemmungsverhalten.html#krümmungsverhalten-bestimmen",
    "title": "Krümmungsverhalten untersuchen",
    "section": "",
    "text": "Um das Krümmungsverhalten einer Funktion zu bestimmen, nutzen wir die zweite Ableitung \\(f''(x)\\). Da wir dort, wie oben beschrieben die Stellen finden, an denen die Änderungsrate der Steigung Null ist. Die Schritte zur Bestimmung des Krümmungsverhaltens sind wie folgt:\n\nZweite Ableitung bilden: Berechne die zweite Ableitung \\(f''(x)\\) der Funktion \\(f(x)\\).\nDritte Ableitung bilden: Berechne die dritte Ableitung \\(f'''(x)\\) der Funktion \\(f(x)\\).\nNullstellen der zweiten Ableitung finden: Bestimme die Nullstellen der zweiten Ableitung, indem du die Gleichung \\(f''(x) = 0\\) löst. Diese Nullstellen sind potenzielle Wendepunkte, an denen sich das Krümmungsverhalten ändern könnte.\nIntervalle aufstellen: Die Nullstellen von \\(f''(x)\\) bilden die Grenzen der Intervalle.\nVorzeichen von \\(f'''(x)\\) prüfen: Wähle für jedes Intervall einen beliebigen Wert innerhalb des Intervalls aus. Setze diesen Wert in \\(f''(x)\\) ein. Das Vorzeichen des Ergebnisses verrät dir das Krümmungsverhalten in diesem gesamten Intervall:\n\n\\(f'''(x) &gt; 0 \\implies\\) Der Graph ist in diesem Intervall linksgekrümmt (konvex).\n\\(f'''(x) &lt; 0 \\implies\\) Der Graph ist in diesem Intervall rechtsgekrümmt (konkav).",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Krümmungsverhalten untersuchen"
    ]
  },
  {
    "objectID": "kruemmungsverhalten.html#aufgabe-krümmungsverhalten-bestimmen",
    "href": "kruemmungsverhalten.html#aufgabe-krümmungsverhalten-bestimmen",
    "title": "Krümmungsverhalten untersuchen",
    "section": "Aufgabe: Krümmungsverhalten bestimmen",
    "text": "Aufgabe: Krümmungsverhalten bestimmen\nDer Code oben hat bisher noch keine Ausgabe.\nUm zu testen, dass Du den Code wirklich verstanden hast, versuche eine Ausgabe zu schreiben, welche den entsprechenden Werten, die in der Funktion bestimmt werden, die passende Ausgabe zu ordnet.\nD.h. in welchem Intervall hat die Funktion welche Krümmung?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNoteHinweis\n\n\n\n\n\n\nÜberleg Dir welcher Abschnitt im Code dafür zuständig ist das Krümmungsverhalten zu berechnen\nIm Anschluss Überleg dir warum di Variablen so heißen wie sie heißen (Was bedeutet jede einzelne)\nZuletzt was wurde oben im Text erklärt, was muss angegeben werden wenn es darum geht ein Krümmungsverhalten anzugeben.\n\n\n\n\nWenn Du damit fertig bist, kommt als letzter Teil dieses Kapitels der Abschnitt Wendepunkte bestimmten.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Krümmungsverhalten untersuchen"
    ]
  },
  {
    "objectID": "nullstellen.html",
    "href": "nullstellen.html",
    "title": "Nullstellen bestimmen",
    "section": "",
    "text": "Auf dieser Seite sollst Du lernen wie Du mit Python Nullstellen bestimmen kannst.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Nullstellen bestimmen"
    ]
  },
  {
    "objectID": "nullstellen.html#aufgabe-zum-bestimmen-von-nullstellen",
    "href": "nullstellen.html#aufgabe-zum-bestimmen-von-nullstellen",
    "title": "Nullstellen bestimmen",
    "section": "Aufgabe zum Bestimmen von Nullstellen",
    "text": "Aufgabe zum Bestimmen von Nullstellen\nErstelle mithilfe des oben gegebenen Codes einen Code, welcher die Nullstellen einer Funktion überprüft und dann eine Ausgabe erzeugt, welche dem Nutzer des Programms angibt, welche Nullstellen die angegebene Funktion hat.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nkleiner Tipp: du kannst die Liste der Nullstellen auch sortieren, damit sie nicht in ausrechnen Reihenfolge, sondern in Zahlenstrahl Reihenfolge erscheint.",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Nullstellen bestimmen"
    ]
  },
  {
    "objectID": "nullstellen.html#probleme-beim-nullstellen-bestimmen-angehen",
    "href": "nullstellen.html#probleme-beim-nullstellen-bestimmen-angehen",
    "title": "Nullstellen bestimmen",
    "section": "Probleme beim Nullstellen bestimmen angehen",
    "text": "Probleme beim Nullstellen bestimmen angehen\nDa dieses Tutorial nur einen kleinen Einblick in das Thema Python Nutzung anhand eines spezifischen Themas geben soll werden hier unterschiedliche Probleme die beim bestimmen von Nullstellen entstehen können nicht aufgegriffen.\n\nNicht lösbar durch sympy.solveset Es gibt einige Funktionen, Z.B. Funktionen die verkettet sind und Trigonometrische Funktionen enthalten, welche nicht durch sympy.solveset gelöst werden können. Bei diesen Funktionen ist es meist jedoch möglich eine Herangehensweise, die numerische Bestimmung der Nullstellen zu betrachten. D.h. man kann dafür Algorithmen wie die Bisektion nutzen um Nullstellen zu finden.\nPeriodizität Bei periodischen Funktionen wie Sinus und Cosinus werden zwar theoretisch richtig alle Nullstellen bestimmt, dies ist jedoch nicht so gut zu lesen wie bei anderen Nullstellen.\n\nDiese Probleme sind jedoch lösbar, falls Dir die Aufgaben bisher ein wenig zu einfach erschienen versuche gerne diese Probleme in deinem Code mit zu beachten!",
    "crumbs": [
      "Symmetrie und Achsenschnittpunkte",
      "Nullstellen bestimmen"
    ]
  },
  {
    "objectID": "toc.html",
    "href": "toc.html",
    "title": "Inhaltsverzeichnis",
    "section": "",
    "text": "Auf dieser Seite gibt es eine kurze Beschreibung dessen was in den unterschiedlichen Kapiteln geschehen soll.\n\nKapitelübersicht\n\nStartseite\n\nKurzbeschreibung:\nDieser Abschnitt soll dir erklären wie diese Website funktioniert und dir die Möglichkeiten zeigen, die durch die Python-Codeblöcken gegeben werden. Auch kannst du hier sehen, wie du neue Python Blöcke erzeugst.\n\n\n\n\nDefinitionsbereiche und Wertebereiche\n\nKurzbeschreibung:\nDieser Abschnitt teilt sich in Definitionsbereich und Wertebereich Untersuchung auf. In den jeweiligen Abschnitten wird gezeigt, wie die jeweiligen Bereiche einer Funktion mit Hilfe von Python bestimmt werden können.\n\n\n\n\nSymmetrie und Achsenschnittpunkte\n\nKurzbeschreibung:\nErfahre hier, wie du Funktionen auf Symmetrieeigenschaften (Achsensymmetrie zur y-Achse, Punktsymmetrie zum Ursprung) untersuchst und die Schnittpunkte mit der x-Achse (Nullstellen) sowie der y-Achse in/mit Python bestimmst.\n\n\n\n\nGlobalverhalten und Asymptoten\n\nKurzbeschreibung:\nDieser Teil des Tutorials zeigt dir, wie du das Verhalten einer Funktion im Unendlichen mit Python bestimmst. Auch wird dir hier gezeigt, wie eine Funktion auf die unterschiedliche Asymptoten (waagerecht, senkrecht, schief) untersuchst und wie du das ganze von Python ausgeben lassen kannst.\n\n\n\n\nMonotonie und Krümmungsverhalten\n\nKurzbeschreibung:\nLerne, wie du mithilfe der Ableitungen das Monotonieverhalten (steigend/fallend), Extrempunkte (Hoch-/Tiefpunkte), das Krümmungsverhalten (konvex/konkav) und Wendepunkte einer Funktion mit Python untersuchst.\n\n\n\n\nGraphen zeichnen\n\nKurzbeschreibung:\nAls Abschluss des Tutorials geht es um die Visualisierung. In diesem Kapitel geht es darum zu beschreiben, wie ein Graph i.A. dargestellt werden kann, aber auch wie in einer Darstellung Punkte markiert und beschriftet werden können (Extrem-, Wendestellen, Asymptoten).",
    "crumbs": [
      "Inhaltsverzeichnis"
    ]
  },
  {
    "objectID": "uebersicht_global_asymptoten.html",
    "href": "uebersicht_global_asymptoten.html",
    "title": "Globalverhalten und Asymptoten",
    "section": "",
    "text": "Kapitelübersicht\nDieses Kapitel hat zwei Abschnitte welche sich mit den folgenden Themen beschäftigen:\n\nGlobalverhalten\n\nDieser Abschnitt beschäftigt sich mit Verhalten von Funktionen im Unendlichen, d.h. es wird betrachtet, wie sich die FUnktionswerte ändern, wenn man \\(\\infty\\), bzw. \\(-\\infty\\) einsetzt. Das wird i.A. das Globalverhalten der Funktion genannt.\n\n\n\n\nAsymptoten\n\nDieser Abschnitt befasst sich mit dem Begriff der Asymptoten.\nEs gibt horizontale und vertikale Asymptoten.\nVertikale Asymptoten bilden sich z.B. um Definitionslücken, wie eine Stelle an der durch Null geteilt werden würde.\nHorizontale Asymptoten bilden sich hingegen z.B. bei Brüchen, wie \\(\\frac{1}{n}\\). Bei beiden handelt es sich um Stellen, bzw. Werte die nicht von der Funktion erreicht werden in deren Umfeld die Funktion jedoch starke Veränderungen durchläuft.",
    "crumbs": [
      "Globalverhalten und Asymptoten"
    ]
  },
  {
    "objectID": "uebersicht_monotonie_kruemmung.html",
    "href": "uebersicht_monotonie_kruemmung.html",
    "title": "Monotonie- und Krümmungsverhalten",
    "section": "",
    "text": "Kapitelübesicht\nIn diesem Kapitel geht es um den Hauptteil der schulischen Kurvendiskussionsuntersuchung.\nEs geht um die Bestimmung von Extrem-/Sattel- und Wendepunkten.\n\nMonotonieverhalten\n\nIn diesem Abschnitt geht es zuerst einmal darum den Begriff der Monotonie zu erklären und zu erklären wie man diese überhaupt untersucht. Es wird auch der Bezug zur Ableitung hergestellt sowie gezeigt wie man eine Untersuchung in Python durchführen kann.\n\n\n\n\nExtrempunkte\n\nIn diesem Abschnitt wird das Wissen aus dem ersten Abschnitt genutzt um zusammen mit der Definition von Extrempunkten die hier gegeben wird eine Untersuchungsmethode für Extrema zu bestimmen.\nBei der Implementierung in Python werden unterschiedliche Möglichkeiten der Bestimmung von Hoch/Tiefpunkten mit einbezogen.\n\n\n\n\nKrümmungsverhalten\n\nIn diesem Abschnitt des Tutorials wird der Begriff Krümmungsverhalten mit Inhalt gefüllt, so wie die Differenzierung zwischen links- und rechts- Krümmung erklärt. Abgesehen davon wird in diesem Kapitel natürlich auch die mögliche Nutzung von Python zu effizienteren Bestimmung von Krümmungsverhalten beschrieben.\n\n\n\n\nWendepunkte\n\nIm letzten Abschnitt des Kapitels geht es darum die Ergebnisse des Krümmungsverhalten Abschnittes zu nutzen um damit herauszufinden wie Wendepunkte mit Hilfe von Python bestimmt werden können.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten"
    ]
  },
  {
    "objectID": "wendepunkte.html",
    "href": "wendepunkte.html",
    "title": "Wendepunkte bestimmen",
    "section": "",
    "text": "Als Wendepunkt wird ein Punkt einer Funktion bezeichnet an dem sich das Krümmungsverhalten der Funktion ändert. Das heißt ähnlich wie bei den Extremwerten und dem Monotonieverhalten verhält es sich auch bei den Wendepunkten und dem Krümmungsverhalten.\nFalls Du also noch nicht den Abschnitt Krümmungsverhalten kannst du das über den Link nachholen. Wissen aus dem Abschnitt wird hier vorausgesetzt.\nAls kleine Erinnerung an den anderen Abschnitt:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDer Code oben bestimmt bisher noch keine Wendepunkte, sondern bietet nur eine sehr gute Grundlage dafür.\nNutze dein Wissen aus den vergangenen Abschnitten um einen Code zu erarbeiten der die Wendepunkte einer Funktion bestimmt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWenn Dir alle Aufgaben bisher zu einfach waren kannst Du im folgenden ein Programm schreiben, welches alle Abschnitte des Kapitels miteinander verbindet.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn Du damit fertig bist ist dieses Kapitel abgeschlossen.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Wendepunkte bestimmen"
    ]
  },
  {
    "objectID": "wendepunkte.html#aufgabe-wendepunkte-bestimmen",
    "href": "wendepunkte.html#aufgabe-wendepunkte-bestimmen",
    "title": "Wendepunkte bestimmen",
    "section": "",
    "text": "Der Code oben bestimmt bisher noch keine Wendepunkte, sondern bietet nur eine sehr gute Grundlage dafür.\nNutze dein Wissen aus den vergangenen Abschnitten um einen Code zu erarbeiten der die Wendepunkte einer Funktion bestimmt.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Wendepunkte bestimmen"
    ]
  },
  {
    "objectID": "wendepunkte.html#bonusaufgabe",
    "href": "wendepunkte.html#bonusaufgabe",
    "title": "Wendepunkte bestimmen",
    "section": "",
    "text": "Wenn Dir alle Aufgaben bisher zu einfach waren kannst Du im folgenden ein Programm schreiben, welches alle Abschnitte des Kapitels miteinander verbindet.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWenn Du damit fertig bist ist dieses Kapitel abgeschlossen.",
    "crumbs": [
      "Monotonie- und Krümmungsverhalten",
      "Wendepunkte bestimmen"
    ]
  }
]