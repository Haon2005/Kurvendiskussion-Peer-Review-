---
title: "Extremstellen berechnen"
format: html
filters:
  - pyodide
---

# Was ist ein Extrempunkt/Sattelpunkt?

Als **Extrempunkt** oder auch **Extremum** wird ein Punkt bezeichnet der "tiefer,höher" als alle anderen Punkte im Umfeld liegt. Als Analogie können ein Berg, bzw. ein Tal betrachtet werden.  

* Die Spitze des Bergs ist ein *Hochpunkt*, also ein Extrempunkt, der höher ist als nebenliegende Funktionswerte.  
* Die tiefste Stelle ist ein *Tiefpunkt*, also ein Extrempunkt, der niedriger ist als nebenliegende Funktionswerte.  
_Im weiteren Verlauf dieses Kapitels wird die Benennung Minimum=Tiefpunkt und Maximum=Hochpunkt genutzt._

## Lokale vs. Globale Extrema
Die Differenzierung zwischen *lokalen- und globalen- Extrempunkten* ist nicht so leicht zu verstehen.  
Eine Funktion kann mehrere *lokale Extrema* haben, jedoch *höchstens ein globales Maximum und höchstens ein globales Minimum*.   
Damit eine Funktion an der Stelle $x$ **ein Extremum hat** müssen **zwei Bedingungen** erfüllt sein.

1.  $f'(x)=0$ Das bedeutet, dass an der Stelle die Steigung Null ist, d.h. der Wert nicht weiter ansteigen/abfallen kann.  
2.  $f''(x) =|= 0$ Das bedeutet, dass an der Stelle die **[Krümmung](kruemmungsverhalten.qmd)** entweder positiv, oder negativ ist, das sorgt dafür, dass das Monotonieverhalten ändert.  

_Der 2. Punkt kann auch anders geprüft werden. Falls die zweite Ableitung nicht bestimmt werden soll, kann ein Wert minimal kleiner und minimal größer als $x$ in die Ableitung eingesetzt werden, wenn sich die Vorzeichen unterscheiden, so ist dort ein Extremum.  
Falls für den kleineren $x$ Wert das Vorzeichen Minus, und für den größeren Plus ist, handelt es sich um einen **Tiefpunkt**,   
Falls für den kleineren $x$ Wert das Vorzeichen Plus, und für den größeren Minus ist, handelt es sich um einen **Hochpunkt**._  


### Globale Extrema 
Damit ein *lokales Maximum/Minimum* ein *globales Maximum/Minimum* ist, muss eine weitere Bedingung gelten:  
Für ein *globales Maximum* $x_{max}$ gilt, $f(x_{max}) \ge f(x) \forall x \in Def.Bereich$  
Für ein *globales Minimum* $x_{min}$ gilt, $f(x_{min}) \le f(x) \forall x \in Def.Bereich$  

## Sattelpunkte

**Sattelpunkt** wird ein potentielles Extremum genannt, welches jedoch keins ist.  
Potentiell in soweit, als dass für einen Sattelpunkt **gilt, dass:** $f'(x_{sat})=0$ ABER im Gegensatz zum Extremum muss für die zweite Ableitung gelten, dass $f''(x_{sat})=0$.  
Ein *Sattelpunkt* ist also ein Punkt in einer Funktion an dem die Steigung Null ist sich vorher und nachher in ihrer Ausrichtung jedoch nicht ändert.

# Python Implementierung

Nachdem Dir nun klar sein sollte, was noch mal ein Extrempunkt/Sattelpunkt ist, wird die Implementierung bei Python betrachtet.

```{pyodide-python}
#| read-only: true
import sympy
x = sympy.symbols('x')
f = x**3 - 3*x**2 + 2
print(f"f(x) = {f}")

f_prime = sympy.diff(f, x) #Erste Ableitung
print(f"f'(x) = {f_prime}")

critical_points = sympy.solve(f_prime, x) #Nullstellen der ersten Ableitung
print(f"Die Nullstellen der ersten Ableitung sind: {critical_points}")

f_double_prime = sympy.diff(f_prime, x) # Zweite Ableitung
print(f"f''(x) = {f_double_prime}")

print("\n--- Test für potentielle Extrema ---")
for cp in critical_points: #Die Liste der Punkte in critical_points wird durchlaufen, mit cp als Laufindex
    f_double_prime_at_cp = f_double_prime.subs(x, cp)
    y_value = f.subs(x, cp) #setzt cp in ursprüngliche Funktion f ein

    if f_double_prime_at_cp > 0:
        print(f"Bei x = {cp} ,y = {y_value} liegt ein Tiefpunkt vor (f''({cp}) = {f_double_prime_at_cp} > 0).")
    elif f_double_prime_at_cp < 0: #elif beutetet Else If, also "falls nicht, wenn, dann...""
        print(f"Bei x = {cp} ,y = {y_value} liegt ein Hochpunkt vor (f''({cp}) = {f_double_prime_at_cp} < 0).")
```

## Aufgabe: Bestimmung Sattelpunkt

Eine leichte Aufgabe zum reinkommen.  
Mithilfe der Erklärung oben sollte es hoffentlich nicht all zu schwer sein einen Code zu verfassen, welcher Eine Funktion testet, ob sie einen Sattelpunkt hat.  
_Ideal wäre natürlich ein Code der nach Hochpunkt/Tiefpunkt, und Sattelpunkt überprüft_  

```{pyodide-python}
#Gib hier deinen Code an
```

## Aufgabe2: Bestimmung Extrema ohne 2. Ableitung

Nach der Einstiegsaufgabe nun eine etwas kniffligere Aufgabe.  
Wie in dem Erklärtext bereits erklärt wurde, gibt es nicht nur die bereits gecodete Variante der Extrema Prüfung, sondern noch mindestens eine weitere, welche keine 2. Ableitung benötigt.  
Verfasse einen Code, der ohne die 2. Ableitung zu bestimmen ebenfalls testet, ob Extrema hat und wenn wo diese sind.  
```{pyodide-python}
#Gib hier deinen Code an
```

Wenn Du damit fertig bist geht es weiter mit **[Krümmungsverhalten](kruemmungsverhalten.qmd)**.
